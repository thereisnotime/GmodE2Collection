@name HyperHolodar Renderer
@inputs EGP:wirelink
@outputs 
@persist EIDtoHID:table EIDtoEGID:table Entities:table Base:vector BaseEnt:entity Scale NextHID NextEGID ModelAny Quota
@persist Env:table Scheduler:table
@trigger 

if(first()|duped()) {
    #include "lib/command"
    #include "lib/coroutine"
    #include "lib/arraytable"
    #include "util/obfuscate"
    
    print("Init part 1")
    
    timer("MDH.Init2", 1000)
}

if(clk("MDH.Init2")) {
    runOnTick(1)
    runOnChat(1)
    timer("MDH.CreateHolos", 3000)
    EGP:egpClear()
    
    NextHID=1
    NextEGID=1
    Base=entity():pos()
    Scale=0.1
    ModelAny=1
    Quota=100
    Scheduler=newScheduler()
    
    function void mdhCoUpdate(State:table, Routine:table, Sched:table) {
        local CurIdx=State["CurIdx", number]
        local Ent=Entities[CurIdx, entity]
        if(Ent["LastPos", vector]==Ent:pos()&Ent["LastAng", angle]==Ent:angles()) {
            CurIdx+=1
            if(CurIdx>Entities:count()) {
                CurIdx=1
            }
            State["CurIdx", number]=CurIdx
            Scheduler:coSchedule(Routine)
            return
        }
        Ent["LastPos", vector]=Ent:pos()
        Ent["LastAng", angle]=Ent:angles()
        if(!Ent) {
            Entities:remove(CurIdx)
            Scheduler:coSchedule(Routine)
            return
        }
        local HID=EIDtoHID[Ent:id(), number]
        if(HID) {
            if(Ent:isPlayer()) {
                holoPos(HID, Base+(Ent:boxCenterW()-Base)*Scale)
                holoAng(HID, Ent:eyeAngles())
            } else {
                #if(!Ent:isFrozen()&!BaseEnt) {
                    #if(BaseEnt|Ent:vel():length()!=0) {
                        holoPos(HID, Base+(Ent:boxCenterW()-Base)*Scale)
                    #}
                    #if(BaseEnt|Ent:angVelVector():length()!=0) {
                        holoAng(HID, Ent:angles())
                    #}
                #}
            }
            if(->EGP) {
                local EGID=EIDtoEGID[Ent:id(), number]
                if(EGID) {
                    EGP:egp3DTracker(EGID, holoEntity(HID):pos())
                }
            }
        }
        CurIdx+=1
        if(CurIdx>Entities:count()) {
            CurIdx=1
        }
        State["CurIdx", number]=CurIdx
        Scheduler:coSchedule(Routine)
    }
    
    function void mdhCoCreateHolos(State:table, Routine:table, Sched:table) {
        if(!holoCanCreate()) {
            print(EIDtoHID:count():toString()+" holos so far; terminating on canCreate")
            Scheduler:coSchedule(Routine)
            return
        }
        local EntIdx=State["EntIdx", number]
        local Ent=Entities[EntIdx, entity]
        local HID=EIDtoHID[Ent:id(), number]
        if(!HID) {
            if(ModelAny) {
                Model=Ent:model()
            } else {
                Model="cube"
            }
            holoCreate(NextHID, Base+(Ent:boxCenterW()-Base)*Scale, vec(1, 1, 1), Ent:angles(), vec(0, 255, 0), Model)
            holoScaleUnits(NextHID, Ent:boxSize()*Scale)
            holoAlpha(NextHID, 127)
            holoDisableShading(NextHID, 1)
            if(Ent:isPlayer()) {
                holoModel(NextHID, "cone")
                holoScale(NextHID, 0.1*Scale*Ent:boxSize())
                holoColor(NextHID, teamColor(Ent:team()))
                holoAng(NextHID, ang(90, 0, 0))
                NextHID=NextHID+1
                holoCreate(NextHID, Base+(Ent:boxCenterW()-Base)*Scale, 0.1*Scale*Ent:boxSize(), ang(), vec(0, 0, 0), "cone")
                holoParent(NextHID-1, NextHID)
                holoAlpha(NextHID, 127)
                holoDisableShading(NextHID, 1)
                if(Ent==owner()) {
                    holoColor(NextHID, vec(127, 0, 255))
                } elseif(Ent:isSuperAdmin()) {
                    holoColor(NextHID, vec(255, 0, 0))
                } elseif(Ent:isAdmin()) {
                    holoColor(NextHID, vec(255, 127, 0))
                } elseif(owner():isSteamFriend(Ent)) {
                    holoColor(NextHID, vec(0, 255, 0))
                } else {
                    holoColor(NextHID, vec(255, 255, 0))
                }
                if(->EGP) {
                    EGP:egp3DTracker(NextEGID, holoEntity(NextHID):pos())
                    EIDtoEGID[Ent:id(), number]=NextEGID
                    NextEGID=NextEGID+1
                    EGP:egpText(NextEGID, Ent:name(), vec2(0, 0))
                    EGP:egpParent(NextEGID, NextEGID-1)
                    EGP:egpColor(NextEGID, vec(0, 255, 0))
                    NextEGID=NextEGID+1
                    EGP:egpText(NextEGID, Ent:toString():matchFirst("[[][0-9]+[]][[](.*)[]]"), vec2(0, 15))
                    EGP:egpParent(NextEGID, NextEGID-2)
                    EGP:egpColor(NextEGID, vec(0, 0, 255))
                    NextEGID=NextEGID+1
                }
            }
            EIDtoHID[Ent:id(), number]=NextHID
            NextHID=NextHID+1
        }
        EntIdx=EntIdx+1
        if(EntIdx>Entities:count()) {
            EntIdx=1
        }
        State["EntIdx", number]=EntIdx
        Scheduler:coSchedule(Routine)
#[      if(!perf()) {
            print(EIDtoHID:count():toString()+" holos so far; terminating on perf")
            return
        }]#
        #print(EIDtoHID:count():toString()+" holos so far; terminating normally")
    }
    
    function void mdhCoAddEntities(State:table, Routine:table, Sched:table) {
        local Array=State["Array", table]
        local Ent=Array:removeEntity(1)
        local State=table()
        State["Entity", entity]=Ent
        State["EntIdx", number]=1
        if(Array:count()) {
            State["Continue", number]=1
            State["OuterRoutine", table]=Routine
        }
        Scheduler:coSchedule(newRoutine("mdhCoAddEntity", State))
    }
    
    function void mdhCoAddEntity(State:table, Routine:table, Sched:table) {
        local Ent=State["Entity", entity]
        local EntIdx=State["EntIdx", number]
        local Continue=State["Continue", number]
        if(Entities[EntIdx, entity]==Ent) {
            if(Continue) {
                Scheduler:coSchedule(State["OuterRoutine", table])
            }
            return
        }
        EntIdx=EntIdx+1
        if(EntIdx>Entities:count()) {
            Entities:pushEntity(Ent)
            if(Continue) {
                Scheduler:coSchedule(State["OuterRoutine", table])
            }
        } else {
            State["EntIdx", number]=EntIdx
            Scheduler:coSchedule(Routine)
        }
    }
    
    function void mdhWatchPlayers(Args:table, Ret:table) {
        local Players=players()
        Entities=table()
        local State=table()
        State["Array", table]=newATFrom(Players, noentity())
        Scheduler:coSchedule(newRoutine("mdhCoAddEntities", State))
        print("Watching "+Entities:count():toString()+" entities.")
    }
    
    function void mdhWAddPlayers(Args:table, Ret:table) {
        local Players=players()
        local State=table()
        State["Array", table]=newATFrom(Players, noentity())
        Scheduler:coSchedule(newRoutine("mdhCoAddEntities", State))
        print("Watching "+Entities:count():toString()+" entities.")
    }
    
    function void mdhWAddMe(Args:table, Ret:table) {
        Entities:pushEntity(owner())
        print("Watching "+Entities:count():toString()+" entities.")
    }
    
    function void mdhWatchAll(Args:table, Ret:table) {
        findByClass("*")
        Entities=findToTable()
        print("Watching "+Entities:count():toString()+" entities.")
    }
    
    function void mdhWatchProps(Args:table, Ret:table) {
        findByClass("prop_physics")
        Entities=findToTable()
        print("Watching "+Entities:count():toString()+" entities.")
    }
    
    function void mdhWAddProps(Args:table, Ret:table) {
        findByClass("prop_physics")
        local Ents=findToTable()
        local State=table()
        State["Array", table]=Ents
        Scheduler:coSchedule(newRoutine("mdhCoAddEntities", State))
        print("Adding "+Ents:count()+" targets")
        print("Watching "+Entities:count():toString()+" entities.")
    }
    
    function void mdhWAddPropsIn(Args:table, Ret:table) {
        findByClass("prop_physics")
        findClipToSphere(owner():pos(), Args[1, number])
        findSortByDistance(owner():pos())
        local Ents=findToTable()
        local State=table()
        State["Array", table]=Ents
        Scheduler:coSchedule(newRoutine("mdhCoAddEntities", State))
        print("Adding "+Ents:count()+" targets")
        print("Watching "+Entities:count():toString()+" entities.")
    }
    
    function void mdhWAddIn(Args:table, Ret:table) {
        print("Got waddin command")
        print("Entities found: "+findByClass(Args[1, string]):toString())
        findClipToSphere(owner():pos(), Args[2, number])
        findSortByDistance(owner():pos())
        local Ents=findToTable()
        local State=table()
        State["Array", table]=Ents
        Scheduler:coSchedule(newRoutine("mdhCoAddEntities", State))
        print("Adding "+Ents:count()+" targets")
        print("Watching "+Entities:count():toString()+" entities.")
    }
    
    function void mdhWClear(Args:table, Ret:table) {
        Entities=table()
        EIDtoHID=table()
        holoDeleteAll()
        EGP:egpClear()
        NextHID=1
        NextEGID=1
    }
    
    function void mdhRescale(Args:table, Ret:table) {
        Scale=Args[1, number]
    }
    
    function void mdhRebase(Args:table, Ret:table) {
        Base=owner():aimEntity():pos()
    }
    
    function void mdhBaseEnt(Args:table, Ret:table) {
        BaseEnt=owner():aimEntity()
    }
    
    function void mdhClearBase(Args:table, Ret:table) {
        BaseEnt=noentity()
    }
    
    function void mdhColorEnt(Args:table, Ret:table) {
        local HID=EIDtoHID[Args[1, entity]:id(), number]
        if(HID) {
            holoColor(HID, Args[2, vector])
        }
    }
    
    Env=newEnv()
    Env:envAddCommand(newCommand("wplayers", "mdhWatchPlayers", ""))
    Env:envAddCommand(newCommand("waddplayers", "mdhWAddPlayers", ""))
    Env:envAddCommand(newCommand("waddme", "mdhWAddMe", ""))
    Env:envAddCommand(newCommand("wprops", "mdhWatchProps", ""))
    Env:envAddCommand(newCommand("waddprops", "mdhWAddProps", ""))
    Env:envAddCommand(newCommand("waddpropsin", "mdhWAddPropsIn", "n"))
    Env:envAddCommand(newCommand("waddin", "mdhWAddIn", "sn"))
    Env:envAddCommand(newCommand("wall", "mdhWatchAll", ""))
    Env:envAddCommand(newCommand("wclear", "mdhWClear", ""))
    Env:envAddCommand(newCommand("dhrescale", "mdhRescale", "n"))
    Env:envAddCommand(newCommand("dhrebase", "mdhRebase", ""))
    Env:envAddCommand(newCommand("dhbaseent", "mdhBaseEnt", ""))
    Env:envAddCommand(newCommand("dhclearbase", "mdhClearBase", ""))
    Env:envAddCommand(newCommand("dhcolorp", "mdhColorEnt", "pv"))
    
    State=table()
    State["CurIdx", number]=1
    Scheduler:coSchedule(newRoutine("mdhCoUpdate", State))
    State=table()
    State["EntIdx", number]=1
    Scheduler:coSchedule(newRoutine("mdhCoCreateHolos", State))
    print("Init finished! I am renderer ID "+entity():id():toString())
}

if(tickClk()) {
    local Reps=0
    local NumItems=Entities:count()
    if(BaseEnt) {
        Base=BaseEnt:pos()
    }
    Scheduler:coRun(Quota)
}

if(chatClk(owner())) {
    if(Env:envExec(owner():lastSaid())) {
        hideChat(1)
    }
}
