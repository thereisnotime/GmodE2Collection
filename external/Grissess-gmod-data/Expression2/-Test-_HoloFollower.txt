@name -Test- HoloFollower
@inputs 
@outputs 
@persist Follower:entity
@trigger 

if(first()|duped()) {
    runOnTick(1)
    Follower=owner()
    
    function vector desiredPosition() {
        return Follower:pos()+Follower:angles():setPitch(0):forward()*30+Follower:angles():setPitch(0):right()*random(-30, 30)+vec(0, 0, 16)
    }
    
    function angle desiredAngle(From:vector) {
        return (Follower:pos()+vec(0, 0, Follower:height())-From):toAngle():setPitch(0)
    }
    
    function vector vector:lerp(Other:vector, Amount:number) {
        return Other*Amount+(This*(1-Amount))
    }
    
    holoCreate(1, vec(0, 0, 0), vec(1, 1, 1), ang(), vec(255, 255, 255), "models/props_c17/doll01.mdl")
    holoCreate(2, vec(0, 0, 0), vec(1, 1, 1), ang(0, 0, 45), vec(255, 255, 255), "models/props_c17/doll01.mdl")
    holoCreate(3, vec(0, 0, 0), vec(1, 1, 1), ang(0, 0, -45), vec(255, 255, 255), "models/props_c17/doll01.mdl")
    holoClipEnabled(2, 1)
    holoClipEnabled(3, 1)
    holoClip(2, vec(0, 0, 3), vec(0, 0, 1), 0)
    holoClip(3, vec(0, 0, 3), vec(0, 0, 1), 0)
    holoParent(3, 1)
    holoParent(2, 1)
}

if(tickClk()) {
    holoPos(1, holoEntity(1):pos():lerp(desiredPosition(), random(0.02, 0.05))) 
    holoAng(1, desiredAngle(holoEntity(1):pos()))
}

if(Follower:keyUse()&Follower:aimEntity():isPlayer()) {
    Follower=Follower:aimEntity()
}
