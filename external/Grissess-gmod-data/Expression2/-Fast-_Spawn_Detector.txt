@name -Fast- Spawn Detector
@inputs 
@outputs 
@persist Class:string IDMap:table TypeMap:table OwnerMap:table
@trigger 

if(first()|duped()) {
    
    function table toMap(Array:table) {
        local T=table()
        for(I=1, Array:count()) {
            T[Array[I, entity]:id(), number]=1
        }
        return T
    }
    
    function table mapDiff(Inside:table, Outside:table) {
        local Keys=Inside:keys()
        local T=table()
        for(I=1,Keys:count()) {
            if(Outside[Keys[I, number], number]==0) {
                T:pushNumber(Keys[I, number])
            }
        }
        return T
    }
    
    Class="gmod_wire_*"
    printColor(vec(0, 127, 0), "[SPWD] ", vec(0, 127, 127), "Init with ", findByClass(Class), " items...")
    IDMap=toMap(findToTable())
    
    timer("Exec", 250)
}

if(clk("Exec")) {
    findByClass(Class)
    local NewMap=toMap(findToTable())
    local Added=mapDiff(NewMap, IDMap)
    local Removed=mapDiff(IDMap, NewMap)
    for(I=1, Added:count()) {
        local E=entity(Added[I, number])
        OwnerMap[Added[I, number], entity]=E:owner()
        TypeMap[Added[I, number], string]=E:type()
        printColor(vec(0, 127, 0), "[SPWD] ", E:owner(), vec(0, 255, 0), " spawned ", E:type())
    }
    for(I=1, Removed:count()) {
        printColor(vec(0, 127, 0), "[SPWD] ", vec(255, 0, 0), OwnerMap[Removed[I, number], entity], " removed ", TypeMap[Removed[I, number], string])
    }
    IDMap=NewMap
    timer("Exec", 250)
}
