@name Player Identifier
@inputs EGP:wirelink
@outputs 
@persist Scheduler:table NextEGID EIDtoEGID:table EIDtoHealthEGID:table EIDtoDistEGID:table Entities:table Env:table
@trigger 

if(first()|duped()) {
    #include "lib/coroutine"
    #include "lib/arraytable"
    #include "lib/command"
    #include "util/obfuscate"
    
    runOnTick(1)
    runOnChat(1)
    EGP:egpClear()
    
    NextEGID=1
    
    function void piIterPlayers(Ents:table, State:table) {
        local Player=Ents[1, entity]
        local EGID=EIDtoEGID[Player:id(), number]
        local HEGID=EIDtoHealthEGID[Player:id(), number]
        local DEGID=EIDtoDistEGID[Player:id(), number]
        local Dist=floor(Player:pos():distance(owner():pos()))
        if(EGID) {
            EGP:egpPos(EGID, Player:pos()+vec(0, 0, Player:height()))
            EGP:egpSetText(HEGID, Player:health():toString())
            EGP:egpSetText(DEGID, Dist:toString())
            if(Dist<1024) {
                EGP:egpColor(DEGID, vec(255, 0, 255))
            } else {
                EGP:egpColor(DEGID, vec(0, 255, 0))
            }
        } else {
            EGP:egp3DTracker(NextEGID, Player:pos()+vec(0, 0, Player:height()))
            EIDtoEGID[Player:id(), number]=NextEGID
            #print("Assigned "+NextEGID:toString()+" to "+Player:name())
            NextEGID+=1
            EGP:egpText(NextEGID, Player:name(), vec2(0, -30))
            EGP:egpParent(NextEGID, NextEGID-1)
            Color=vec(255, 255, 0)
            if(Player==owner()) {
                Color=vec(127, 0, 255)
            } elseif(Player:isSuperAdmin()) {
                Color=vec(255, 0, 0)
            } elseif(Player:isAdmin()) {
                Color=vec(255, 127, 0)
            } elseif(Player:isSteamFriend(owner())) {
                Color=vec(0, 255, 255)
            }
            EGP:egpColor(NextEGID, Color)
            NextEGID+=1
            EGP:egpText(NextEGID, Player:toString():matchFirst("[[][0-9]+[]][[](.*)[]]"), vec2(0, -15))
            EGP:egpParent(NextEGID, NextEGID-2)
            EGP:egpColor(NextEGID, vec(0, 0, 255))
            NextEGID+=1
            EGP:egpText(NextEGID, Player:health():toString(), vec2(0, 0))
            EGP:egpParent(NextEGID, NextEGID-3)
            EGP:egpColor(NextEGID, vec(255, 0, 0))
            EIDtoHealthEGID[Player:id(), number]=NextEGID
            NextEGID+=1
            EGP:egpText(NextEGID, Dist:toString(), vec2(0, -45))
            EGP:egpParent(NextEGID, NextEGID-4)
            if(Dist<1024) {
                EGP:egpColor(NextEGID, vec(255, 0, 255))
            } else {
                EGP:egpColor(NextEGID, vec(0, 255, 0))
            }
            EIDtoDistEGID[Player:id(), number]=NextEGID
            NextEGID+=1
        }
    }
    
    function void piUpdatePlayers(Iterator:table, Sched:table) {
        #print("Begin AT")
        local Array=newATFrom(players(), noentity())
        #print("Finished AT")
        Scheduler:coSchedSleep(newIterator("piIterPlayers", Array, table(), "piUpdatePlayers"))
        #print("Finished sleep")
    }
    
    function void piReset(Args:table, Ret:table) {
        reset()
    }
    
    Scheduler=newScheduler()
    piUpdatePlayers(Scheduler[1, table], Scheduler)
    
    Env=newEnv()
    Env:envAddCommand(newCommand("pireset", "piReset", ""))
}

if(tickClk()) {
    Scheduler:coRun(25)
}

if(chatClk(owner())) {
    if(Env:envExec(owner():lastSaid())) {
        hideChat(1)
    }
}
