@name Camera Controller
@inputs CC:wirelink
@outputs Target:entity Mode:number Pos:vector OutPos:vector OutAng:angle
@persist MODE_OFF MODE_THROUGH MODE_BEHIND MODE_FREECAM MODE_MANUAL
@persist Env:table LastUse
@trigger 

if(->CC&!->Mode) {
    #ifdef entity:createWire(entity, string, string)
    CC:entity():createWire(entity(), "Activated", "Mode")
    CC:entity():createWire(entity(), "Angle", "OutAng")
    CC:entity():createWire(entity(), "Position", "OutPos")
    #endif
}

if(first()|duped()) {
    #include "lib/command"
    #include "util/obfuscate"
    
    runOnChat(1)
    runOnTick(1)
#[    if(!cameraRemainingSpawns()) {
        hint("Cannot create a camera. Try using a cam controller instead.", 7)
    }
    cameraCreate(1)]#
    
    #ifdef lightCreate(number, vector, vector, number, number)
    lightCreate(1, vec(0, 0, 0), vec(255, 255, 255), 4096, 16)
    lightToggle(1, 0)
    #endif
    
    MODE_OFF=0
    MODE_THROUGH=1
    MODE_BEHIND=2
    MODE_FREECAM=3
    MODE_MANUAL=4
    
    Mode=MODE_OFF
    
    function void ccThink() {
        local P=vec()
        local A=ang()
        if(Mode==MODE_THROUGH|Mode==MODE_BEHIND|Mode==MODE_FREECAM) {
            P=Target:pos()
            if(Target:isPlayer()) {
                P=P+vec(0, 0, Target:height())
            }
            if(Mode==MODE_FREECAM) {
                A=owner():eyeAngles()
            } else {
                if(Target:isPlayer()) {
                    A=Target:eyeAngles()
                } else {
                    A=Target:angles()
                }
            }
            if(Mode==MODE_BEHIND) {
                local CP=P+A:forward()*-200+A:up()*50
                rangerFilter(Target)
                local RD=rangerOffset(P, CP)
                P=RD:pos()
            }
        } elseif(Mode==MODE_MANUAL) {
            P=Pos
            if(Target) {
                A=(Target:pos()-Pos):toAngle()
            } else {
                A=owner():eyeAngles()
            }
            local SF=0
            local SR=0
            if(owner():keyForward()) {
                SF=SF+3
            }
            if(owner():keyBack()) {
                SF=SF-3
            }
            if(owner():keyLeft()) {
                SR=SR-3
            }
            if(owner():keyRight()) {
                SR=SR+3
            }
            if(owner():keySprint()) {
                SR=SR*5
                SF=SF*5
            }
            if(owner():keyDuck()) {
                SR=SR/3
                SF=SF/3
            }
            P=P+A:forward()*SF+A:right()*SR
            Pos=P
        }
#[        cameraPos(1, P)
        cameraAng(1, A)]#
        #ifdef lightPos(number, vector)
        lightPos(1, P)
        #endif
        OutPos=P
        OutAng=A
        if(owner():keyUse()&!LastUse) {
            if(Mode==MODE_OFF) {
                Ent=owner():aimEntity()
            } else {
                Ent=rangerOffset(P, P+A:forward()*8192):entity()
            }
            if(Ent:owner()) {
                printColor(vec(127, 0, 127), Ent:toString(), "(", Ent:owner(), ")")
            } else {
                printColor(vec(127, 0, 127), Ent:toString())
            }
            if(owner():keyWalk()) {
                printColor(vec(127, 0, 255), "Name: ", Ent:name())
                printColor(vec(0, 127, 0), "Model: ", Ent:model())
                printColor(vec(0, 127, 127), "Material: ", Ent:getMaterial())
                printColor(vec(127, 127, 0), "Skin: ", Ent:getSkin())
                if(Ent:isPlayer()) {
                    printColor(vec(127, 0, 0), "Health: ", vec(255, 0, 0), Ent:health(), vec(0, 0, 127), " Armor: ", vec(0, 0, 255), Ent:armor())
                    Weapon=Ent:weapon()
                    if(Weapon) {
                        printColor(vec(127, 127, 127), "Holding: ", Weapon:type(), "(", Weapon:clip1(), "/", Ent:ammoCount(Weapon:primaryAmmoType()), ", ", Weapon:clip2(), "/", Ent:ammoCount(Weapon:secondaryAmmoType()), ")")
                        if(Weapon:type()=="gmod_tool") {
                            printColor(vec(255, 255, 255), "Tool: ", Ent:tool())
                        }
                    }
                }
            }
        }
        LastUse=owner():keyUse()
    }
    
    function void ccThrough(Args:table, Ret:table) {
        Target=Args[1, entity]
        if(!Target) {
            Target=owner():aimEntity()
        }
        print("Target set: "+Target:toString())
        #if(Mode==MODE_OFF) {cameraToggle(1, 1)}
        Mode=MODE_THROUGH
    }
    
    function void ccBehind(Args:table, Ret:table) {
        Target=Args[1, entity]
        if(!Target) {
            Target=owner():aimEntity()
        }
        print("Target set: "+Target:toString())
        #if(Mode==MODE_OFF) {cameraToggle(1)}
        Mode=MODE_BEHIND
    }
    
    function void ccFreeCam(Args:table, Ret:table) {
        if(Args[1, entity]) {
            Target=Args[1, entity]
        }
        print("Target set: "+Target:toString())
        #if(Mode==MODE_OFF) {cameraToggle(1)}
        Mode=MODE_FREECAM
    }
    
    function void ccManualPos(Args:table, Ret:table) {
        Pos=Args[1, vector]
        #if(Mode==MODE_OFF) {cameraToggle(1)}
        Mode=MODE_MANUAL
    }
    
    function void ccManualSelf(Args:table, Ret:table) {
        Pos=owner():pos()+vec(0, 0, owner():height())
        #if(Mode==MODE_OFF) {cameraToggle(1)}
        Mode=MODE_MANUAL
    }
    
    function void ccManualCur(Args:table, Ret:table) {
        Pos=OutPos
        Mode=MODE_MANUAL
    }
    
    function void ccManualCurNoTarget(Args:table, Ret:table) {
        Pos=OutPos
        Mode=MODE_MANUAL
        Target=noentity()
    }
    
    function void ccSetTarg(Args:table, Ret:table) {
        Target=Args[1, entity]
        print("Target set: "+Target:toString())
    }
    
    function void ccReset(Args:table, Ret:table) {
        #if(Mode!=MODE_OFF) {cameraToggle(1)}
        Mode=MODE_OFF
    }
    
    function void clLight(Args:table, Ret:table) {
        #ifdef lightToggle(number, number)
        lightToggle(1, Args[1, number])
        #endif
    }
    
    function void clBrightness(Args:table, Ret:table) {
        #ifdef lightBrightness(number, number)
        lightBrightness(1, Args[1, number])
        #endif
    }
    
    function void clDistance(Args:table, Ret:table) {
        #ifdef lightDistance(number, number)
        lightDistance(1, Args[1, number])
        #endif
    }
    
    function void clColor(Args:table, Ret:table) {
        #ifdef lightColor(number, vector)
        lightColor(1, Args[1, vector])
        #endif
    }
    
    Env=newEnv()
    Env:envAddCommand(newCommand("through", "ccThrough", "Op"))
    Env:envAddCommand(newCommand("behind", "ccBehind", "Op"))
    Env:envAddCommand(newCommand("freecam", "ccFreeCam", "Op"))
    Env:envAddCommand(newCommand("manpos", "ccManualPos", "v"))
    Env:envAddCommand(newCommand("manself", "ccManualSelf", ""))
    Env:envAddCommand(newCommand("mancur", "ccManualCur", ""))
    Env:envAddCommand(newCommand("mancurnt", "ccManualCurNoTarget", ""))
    Env:envAddCommand(newCommand("settarg", "ccSetTarg", "Oe"))
    Env:envAddCommand(newCommand("reset", "ccReset", ""))
    Env:envAddCommand(newCommand("light", "clLight", "n"))
    Env:envAddCommand(newCommand("brightness", "clBrightness", "n"))
    Env:envAddCommand(newCommand("distance", "clDistance", "n"))
    Env:envAddCommand(newCommand("color", "clColor", "v"))
}

if(chatClk(owner())) {
    if(Env:envExec(owner():lastSaid())) {
        hideChat(1)
    }
}

if(tickClk()) {
    ccThink()
}
