@name Autonomous Crow
@inputs 
@outputs 
@persist CROW_FLY CROW_IDLE CROW_WALK CROW_JOG CROW_IDLE2 CROW_IDLE3 CROW_TAKEOFF CROW_GLIDE CROW_LAND
@persist CROW_LANDMOVE CROW_LAND2 CROW_LAND2MOVE CROW_GLIDE2 CROW_HOPFLY CROW_GLIDE3 CROW_GLIDE4
@persist S_IDLING S_WALKING S_TAKEOFF S_FLYING S_LANDING
@persist States:table Ents:table Num
@trigger 

if(first()) {
    Num=4
    CROW_FLY=0
    CROW_IDLE=1
    CROW_WALK=2
    CROW_JOG=3
    CROW_IDLE2=4
    CROW_IDLE3=5
    CROW_TAKEOFF=6
    CROW_GLIDE=7
    CROW_LAND=8
    CROW_LANDMOVE=9
    CROW_LAND2=10
    CROW_LAND2MOVE=11
    CROW_GLIDE2=12
    CROW_HOPFLY=13
    CROW_GLIDE3=14
    CROW_GLIDE4=15
    S_IDLING=0
    S_WALKING=1
    S_TAKEOFF=2
    S_FLYING=3
    S_LANDING=4
    for(I=1,Num) {
        holoCreate(I)
        Ents[I, entity]=holoEntity(I)
        States[I, number]=S_IDLING
        holoModel(I, "models/crow.mdl")
        holoAnim(I, CROW_IDLE)
    }
    timer("States[I, number]Change", 1000)
    runOnTick(1)
}

if(clk("States[I, number]Change")) {
    for(I=1,Num) {
        if(States[I, number]==S_IDLING) {
            #Be disturbed by players
            findInSphere(Ents[I, entity]:pos(), 128)
            findClipToClass("player")
            findSortByDistance(Ents[I, entity]:pos())
            local Res=findToTable()
            if(Res:count()>0) {
                local Ply=Res[1, entity]
                holoAng(I, ang(0, (Ents[I, entity]:pos()-Ply:pos()):toAngle():yaw(), 0))
                holoAnim(I, CROW_TAKEOFF)
                States[I, number]=S_TAKEOFF
                timer("States[I, number]Change", 500)
            } else {
                #Maybe walk around a little?
                if(random()>0.95) {
                    holoAnim(I, CROW_WALK)
                    States[I, number]=S_WALKING
                }
                timer("States[I, number]Change", 1000)
            }
        } elseif(States[I, number]==S_WALKING) {
            #Maybe stop walking?
            if(random()>0.9) {
                holoAnim(I, CROW_IDLE)
                States[I, number]=S_IDLING
            }
            timer("States[I, number]Change", 1000)
        } elseif(States[I, number]==S_TAKEOFF) {
            holoAnim(I, CROW_FLY)
            holoAng(I, ang(randint(60)-40, Ents[I, entity]:angles():yaw(), 0))
            States[I, number]=S_FLYING
            timer("States[I, number]Change", 500)
        } elseif(States[I, number]==S_FLYING) {
            if(random()>0.95) {
                holoAnim(I, CROW_FLY)
                holoAng(I, ang(randint(60)-60, Ents[I, entity]:angles():yaw()+randint(60)-30, 0))
            } else {
                holoAnim(I, CROW_GLIDE)
            }
            #Maybe land somewhere?
            if(random()>0.98) {
                holoAnim(I, CROW_GLIDE)
                States[I, number]=S_LANDING
            }
            timer("States[I, number]Change", 100)
        } else {
            timer("States[I, number]Change", 500)
        }   
    }
}

if(tickClk()) {
    for(I=1,Num) {
        local Forward=Ents[I, entity]:angles():forward()
        if(States[I, number]==S_WALKING) {
            Forward=Forward:setZ(0)
        } elseif(States[I, number]==S_TAKEOFF) {
            Forward=Forward:setZ(1)
        } elseif(States[I, number]==S_LANDING) {
            Forward=Forward:setZ(-1)
        }
        rangerHitEntities(0)
        if(States[I, number]==S_LANDING) {
            if(rangerOffset(Ents[I, entity]:pos(), Ents[I, entity]:pos()-vec(0, 0, 64)):hitWorld()) {
                holoAnim(I, CROW_LAND)
            }
            if(rangerOffset(Ents[I, entity]:pos()+vec(0, 0, 5), Ents[I, entity]:pos()+Forward*3+vec(0, 0, 5)):hitWorld()) {
                holoAnim(I, CROW_IDLE)
                States[I, number]=S_IDLING
            }
        } else {
            if(rangerOffset(Ents[I, entity]:pos()+vec(0, 0, 5), Ents[I, entity]:pos()+Forward*25+vec(0, 0, 5)):hitWorld()) {
                holoAng(I, ang(randint(90)-60, Ents[I, entity]:angles():yaw()+randint(90)-45, 0))
            }
        }
        if(States[I, number]==S_WALKING) {
            holoPos(I, Ents[I, entity]:pos()+Forward*1)
        } elseif(States[I, number]==S_TAKEOFF) {
            holoPos(I, Ents[I, entity]:pos()+Forward*3)
        } elseif(States[I, number]==S_FLYING) {
            holoPos(I, Ents[I, entity]:pos()+Forward*5)
        } elseif(States[I, number]==S_LANDING) {
            holoPos(I, Ents[I, entity]:pos()+Forward*3)
        }
    }
}
