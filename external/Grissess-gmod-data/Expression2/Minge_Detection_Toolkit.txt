@name Minge Detection Toolkit
@inputs 
@outputs 
@persist Env:table Scheduler:table
@trigger 

if(first()|duped()) {
    #include "lib/command"
    #include "lib/coroutine"
    ##include "util/obfuscate"
    
    runOnTick(1)
    runOnChat(1)
    
    function void psIterPropCounter(Props:table, State:table) {
        local Prop=Props[1, entity]
        local Counts=State["Counts", table]
        if(Props:count()%50==0) {
            printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Prop scan: ", Props:count(), "remaining...")
        }
        if(Prop:isFrozen()&!State["DoFrozen", number]) {
            return
        }
        if(Prop:owner()&Prop:owner():isPlayer()) {
            Counts[Prop:owner():id(), number]=Counts[Prop:owner():id(), number]+1
        } else {
            Counts[0, number]=Counts[0, number]+1
        }
    }
    
    function void psFinishPropCounter(Iterator:table, Sched:table) {
        printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Scan results:")
        local State=Iterator:itState()
        local Counts=State["Counts", table]
        local Total=Counts:toArray():sum()
        local Keys=Counts:keys()
        local Max=Counts:max()
        #printTable(Counts)
        for(Key=1,Keys:count()) {
            local I=Keys[Key, number]
            if(I==0) {
                local Count=Counts[I, number]
                printColor(vec(0, 0, 0), "[MDT] World", vec(0, 127, 127), ": ", Count, " (", (100*Count/Total), "%)")
            }
            local Player=entity(I)
            if(!Player) {
                continue
            }
            local Count=Counts[I, number]
            local TCol=vec(0, 127, 127)
            if(Count==Max) {
                TCol=vec(255, 0, 0)
            }
            printColor(vec(0, 0, 0), "[MDT] ", teamColor(Player:team()), Player:name(), TCol, ": ", Count, " (", (100*Count/Total), "%)")
        }
    }
    
    function void psIterPropDensityFilterOwner(Props:table, State:table) {
        local Prop=Props[1, entity]
        local Owner=State["Owner", entity]
        local NewProps=State["NewProps", table]
        if(Prop:owner()==Owner) {
            NewProps:pushEntity(Prop)
        }
    }
    
    function void psFinishPropDensityFilterOwner(Iterator:table, Sched:table) {
        local State=Iterator:itState()
        local Props=State["NewProps", table]
        printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Scanning ", Props:count(), " props, please wait...")
        local State=table()
        State["Orig", table]=Props:clone()
        State["BSzSum", vector]=vec(0, 0, 0)
        State["PosSum", vector]=vec(0, 0, 0)
        Scheduler:coSchedule(newIterator("psIterPropDensityAvgs", Props, State, "psFinishPropDensityAvgs"))
    }
    
    function void psIterPropDensityAvgs(Props:table, State:table) {
        local Prop=Props[1, entity]
        if(Props:count()%50==0) {
            printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Prop scan: ", Props:count(), "remaining...")
        }
        State["BSzSum", vector]=State["BSzSum", vector]+Prop:boxSize()
        State["PosSum", vector]=State["PosSum", vector]+Prop:boxCenterW()
    }
    
    function void psFinishPropDensityAvgs(Iterator:table, Sched:table) {
        local State=Iterator:itState()
        local Props=State["Orig", table]:clone()
        local Count=Props:count()
        State["BSzAvg", vector]=State["BSzSum", vector]/Count
        State["PosAvg", vector]=State["PosSum", vector]/Count
        State["BSzDSum", vector]=vec(0, 0, 0)
        State["PosDSum", vector]=vec(0, 0, 0)
        printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Averaging finished; now computing deviations...")
        Sched:coSchedule(newIterator("psIterPropDensityDevs", Props, State, "psFinishPropDensityDevs"))
    }
    
    function void psIterPropDensityDevs(Props:table, State:table) {
        local Prop=Props[1, entity]
        if(Props:count()%50==0) {
            printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Prop scan: ", Props:count(), "remaining...")
        }
        local DBs=Prop:boxSize()-State["BSzAvg", vector]
        local DPos=Prop:pos()-State["PosAvg", vector]
        State["BSzDSum", vector]=State["BSzDSum", vector]+DBs*DBs
        State["PosDSum", vector]=State["PosDSum", vector]+DPos*DPos
    }
    
    function void psFinishPropDensityDevs(Iterator:table, Sched:table) {
        local State=Iterator:itState()
        local Props=State["Orig", table]:clone()
        local Count=Props:count()
        State["BSzDev", vector]=State["BSzDSum", vector]/Count
        State["BSzDev", vector]=vec(sqrt(State["BSzDev", vector]:x()), sqrt(State["BSzDev", vector]:y()), sqrt(State["BSzDev", vector]:z()))
        State["PosDev", vector]=State["PosDSum", vector]/Count
        State["PosDev", vector]=vec(sqrt(State["PosDev", vector]:x()), sqrt(State["PosDev", vector]:y()), sqrt(State["PosDev", vector]:z()))
        printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Scanned ", vec(127, 0, 0), Count:toString(), vec(0, 127, 127), " props:")
        printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Average position: ", vec(0, 127, 0), State["PosAvg", vector]:toString())
        printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Average  box size: ", vec(0, 127, 0), State["BSzAvg", vector]:toString())
        printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Position deviation: ", vec(0, 127, 0), State["PosDev", vector]:toString())
        printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Box size deviation: ", vec(0, 127, 0), State["BSzDev", vector]:toString())
        local SzPosDev=State["PosDev", vector]/State["BSzAvg", vector]
        local Col=vec(0, 255, 0)
        if(SzPosDev:length()<10) {
            Col=vec(255, 255, 0)
        }
        if(SzPosDev:length()<3) {
            Col=vec(255, 0, 0)
        }
        printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Size:position deviation ratio: ", Col, SzPosDev:toString())
    }
    printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Init part 1...")
    timer("Init2", 1000)
}

if(clk("Init2")) {
    function void mdtPropScan(Args:table, Ret:table) {
        findByClass("prop_physics")
        local Props=findToTable()
        printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Found ", Props:count(), " props, please wait...")
        local State=table()
        State["Orig", table]=Props:clone()
        State["Counts", table]=table()
        State["DoFrozen", number]=Args[1, number]
        Scheduler:coSchedule(newIterator("psIterPropCounter", Props, State, "psFinishPropCounter"))
    }
    
    function void mdtWmScan(Args:table, Ret:table) {
        findByClass("gmod_wire_*")
        local Ents=findToTable()
        printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Found ", Ents:count(), " entitiess, please wait...")
        local State=table()
        State["Orig", table]=Ents:clone()
        State["Counts", table]=table()
        State["DoFrozen", number]=1
        Scheduler:coSchedule(newIterator("psIterPropCounter", Ents, State, "psFinishPropCounter"))
    }
    
    function void mdtPropDensity(Args:table, Ret:table) {
        local Owner=Args[1, entity]
        findByClass("prop_physics")
        local Props=findToTable()
        if(Owner) {
            printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Filtering ", Props:count(), " props, please wait...")
            local State=table()
            State["NewProps", table]=table()
            State["Owner", entity]=Owner
            Scheduler:coSchedule(newIterator("psIterPropDensityFilterOwner", Props, State, "psFinishPropDensityFilterOwner")) 
        } else {
            printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Found ", Props:count(), " props, please wait...")
            local State=table()
            State["Orig", table]=Props:clone()
            State["BSzSum", vector]=vec(0, 0, 0)
            State["PosSum", vector]=vec(0, 0, 0)
            Scheduler:coSchedule(newIterator("psIterPropDensityAvgs", Props, State, "psFinishPropDensityAvgs"))
        }
    }
    
    function void mdtListE2(Args:table, Ret:table) {
        findByClass("gmod_wire_expression2")
        local E2s=findToTable()
        for(I=1, E2s:count()) {
            local Ent=E2s[I, entity]
            printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), Ent:type(), " ", Ent:id():toString(), " ", vec(0, 127, 0), Ent:getName(), " ", vec(127, 0, 0), Ent:owner(), " ", Ent:owner():name())
        }
    }
    
    Env=newEnv()
    Env:envAddCommand(newCommand("propscan", "mdtPropScan", "On"))
    Env:envAddCommand(newCommand("propdensity", "mdtPropDensity", "Op"))
    Env:envAddCommand(newCommand("wmscan", "mdtWmScan", ""))
    Env:envAddCommand(newCommand("lse2", "mdtListE2", ""))
    
    Scheduler=newScheduler()
    
    printColor(vec(0, 0, 0), "[MDT] ", vec(0, 127, 127), "Init part 2. (Ready.)")
}

if(tickClk()) {
    Scheduler:coRun(50)
}

if(chatClk(owner())) {
    if(Env:envExec(owner():lastSaid())) {
        hideChat(1)
    }
}
