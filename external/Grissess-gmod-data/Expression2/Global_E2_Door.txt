@name Global E2 Door
@outputs Door
@persist D Players:table Chips:array

if(first()|dupefinished()){
    # Run on chat, removal
    runOnChat(1)
    runOnLast(1)
    
    # Dupe Protection
    Mute = "STEAM_0:0:27087743" Guest = "STEAM_0:0:19664077" 
    if(owner():steamID() != Mute && owner():steamID() != Guest)
    {
        printColor(vec(225,30,30),"You do not own this chip, removing..")
        selfDestructAll()
        error("You do not own this chip.")
    }
    
    # Check attachment, autowire
    if(!(entity():isWeldedTo():getWireInputs()[1,string] == "Fade")) {
        printColor(vec(225,30,30),"Not attached to a fading door, removing...")
        selfDestruct()
        error("Chip must be attached to a fading door.")
    }
    else
    {
        entity():isWeldedTo():createWire(entity(), "Fade", "Door")
    }
    
    # You own this chip!
    setName("" + owner():name()+"'s Door") 
    
    # Beginning Variables
    Door = 0
    D = 40
    findIncludeClass("player")
    
    # Globals  
    GTable = gTable(owner():steamID())
    
    Players = GTable["Players",table]
    GTable["Players",table] = Players 
    
    Chips = GTable["Chips",array]
    GTable["Chips",array] = Chips

    
    # Eliminate removed chips
    Name = entity():getName()
    for(I=1,Chips:count())
    {
        if(Chips[I,entity]:getName() != Name|Chips[I,entity] == entity())
        {
            Chips:remove(I)
        }
    }
    Chips:pushEntity(entity())
    
    # Eliminate disconnected players
    for(I=1,Players:count())
    {
        K = Players:keys()[I,string]
        V = Players[K,string]
        if(!findPlayerByName(V):isPlayer())
        {
            printColor(vec(30,190,225),"Door Chip: Disconnected player '" + V + "' was removed.")
            Players:remove(K)
        }
    }
    
    #Only run the help & init on the first chip
    if(Chips[1,entity] == entity())
    {
        #Add the owner          
        if(!Players:exists(owner():steamID()))
        {
            Players[owner():steamID(),string] = owner():name()
        }     
        
        # Instructions and Credits. Please don't remove the credits.
        printColor(vec(30,190,225),"Door Chip: #add <name>, #rem <name>, #list, #reset, #range\n",vec(225,30,30),"W.B. Mute")
    }
    
}
# Remove table entry when removed
elseif(last())
{
    for(I=1,Chips:count())
    {
        if(Chips[I,entity] == entity())
        {
            Chips:remove(I)
        }
    }
}

# Interval - anywhere between 100 and 300 works fine
interval(100)

# Reset Door
Door = 0

# Find function
findInSphere(entity():pos(), D)
if(find() & find():isAlive())
{
    if(Players:exists(find():steamID()))
    {
        Door = 1      
    }
}

# Chat commands
if (chatClk(owner()))
{
    
    # Check if this is the first chip - only one will respond to the chat command
    if(Chips[1,entity] == entity())
    {    
        # Explode the string
        Str = owner():lastSaid():lower():explode(" ")
        
        # The usual chat command stuff
        if(Str[1,string]=="#add")
        {
            hideChat(1)
            TP = findPlayerByName(Str[2,string])
            if(TP)
            {
                TPS = TP:steamID()
                TPN = TP:name()
                if(!Players:exists(TPS))
                {
                    printColor(vec(30,190,225),"Door Chip: Added Player '" + TPN + "'")
                    Players[TPS,string] = TPN
                }
                else
                {
                    printColor(vec(225,30,30),"Door Chip: Player '" + TPN + "' is already whitelisted.") 
                } 
            }
           else
            {                
                printColor(vec(225,30,30),"Door Chip: Player '" + Str[2,string] + "' not found!")
            }       
        }
        
        elseif(Str[1,string]=="#rem")
        {
            hideChat(1)
            TP = findPlayerByName(Str[2,string])
            TPS = TP:steamID()
            TPN = TP:name()
            if(TP)
            {    
                if(Players:exists(TPS))
                {
                    printColor(vec(30,190,225),"Door Chip: Removed Player '" + TPN + "'")
                    Players:remove(TPS)
                }
                else
                {
                    printColor(vec(225,30,30),"Door Chip:  Player '" + TPN + "' is not whitelisted.")
                }
            }
            else
            {                
                printColor(vec(225,30,30),"Door Chip: Player '" + Str[2,string] + "' not found!")
            }
        }
    
        elseif(Str[1,string]=="#list")
        {
            hideChat(1)
            if(Players:count()>0)
            {   
                printColor(vec(30,190,225),"Door Chip Player Whitelist:") 
                for(I=1,Players:count())
                {
                    K = Players:keys()[I,string]
                    V = Players[K,string]
                    printColor(vec(30,190,225),V + "   ::   " + K)
                }
            }
            else
            {                
                printColor(vec(225,30,30),"Door Chip: No players whitelisted!")
            }
        }
        
        elseif(Str[1,string]=="#reset")
        {
            hideChat(1)
            Players:clear()
            Players[owner():steamID(),string] = owner():name()  
            printColor(vec(30,190,225),"Door Chip: Whitelist cleared.")
        }
        elseif(Str[1,string]=="#range")
        {
            hideChat(1)
            TD = Str[2,string]:toNumber()
            if(TD)
            {
                D = TD
                printColor(vec(30,190,225),"Door Chip: Range set to " + D)
            }
            else
            {
                D = 40
                printColor(vec(30,190,225),"Door Chip: Range reset to default (40).")
            }
        }
    }
}
