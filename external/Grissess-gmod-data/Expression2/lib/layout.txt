#EGP layout library

#include "lib/rect"

function table newCell(Pos:number, Size:number, PrefSize:number, MinSize:number) {
    local Ret=table()
    Ret["Pos", number]=Pos
    Ret["Size", number]=Size
    Ret["PrefSize", number]=PrefSize
    Ret["MinSize", number]=MinSize
    return Ret
}

function table newCell(Pos:number, Size:number, PrefSize:number) {
    return newCell(Pos, Size, PrefSize, 0)
}

function table newCell(Pos:number, Size:number) {
    return newCell(Pos, Size, -1, 0)
}

function table newCell(Pos:number) {
    return newCell(Pos, 0, -1, 0)
}

function table newCell() {
    return newCell(-1, 0, -1, 0)
}

function table newLayoutVector(Items:number) {
    local Ret=table()
    Ret["Cells", table]=table()
    for(I=1,Items) {
        Ret["Cells", table]:pushTable(newCell())
    }
    return Ret
}

function table newGrid(XCells:number, YCells:number) {
    local Ret=table()
    Ret["XLV", table]=newLayoutVector(XCells)
    Ret["YLV", table]=newLayoutVector(YCells)
    return Ret
}

function number table:clPos() {
    return This["Pos", number]
}

function number table:clSize() {
    return This["Size", number]
}

function number table:clPrefSize() {
    return This["PrefSize", number]
}

function number table:clMinSize() {
    return This["MinSize", number]
}

function void table:clSetPos(Pos:number) {
    This["Pos", number]=Pos
}

function void table:clSetSize(Size:number) {
    This["Size", number]=Size
}

function void table:clSetPrefSize(PrefSize:number) {
    This["PrefSize", number]=PrefSize
}

function void table:clSetMinSize(MinSize:number) {
    This["MinSize", number]=MinSize
}

function table table:lvCells() {
    return This["Cells", table]
}

function table table:lvCell(Index:number) {
    return This:lvCells()[Index, table]
}

function table table:gdXLV() {
    return This["XLV", table]
}

function table table:gdYLV() {
    return This["YLV", table]
}

function table table:gdRectAt(X:number, Y:number) {
    local XCell=This:gdXLV():lvCell(X)
    local YCell=This:gdYLV():lvCell(Y)
    return newRect(vec2(XCell:clPos(), YCell:clPos()), vec2(XCell:clSize(), YCell:clSize()))
}

function void table:lvUpdateLayout(Dim:number) {
    local Cells=This:lvCells()
    local CurPos=0
    for(I=1,Cells:count()) {
        local Cell=Cells[I, table]
        Cell:clSetPos(CurPos)
        #XXX More clearly todo in this algorithm.
        if(Cell:clPrefSize()>0) {
            if(Cell:clPrefSize()<Dim-CurPos) {
                Cell:clSetSize(Cell:clPrefSize())
            } else {
                Cell:clSetSize(Cell:clMinSize())
            }
        } else {
            Cell:clSetSize((Dim-CurPos)/(Cells:count()-I+1))
        }
        CurPos=CurPos+Cell:clSize()
    }
}

function void table:gdUpdateLayout(Dims:vector2) {
    This:gdXLV():lvUpdateLayout(Dims:x())
    This:gdYLV():lvUpdateLayout(Dims:y())
}
