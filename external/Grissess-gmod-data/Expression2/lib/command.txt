@name libCommand

#Command parsing library

#Run-down on signatures: a signature is a string in which each character represents a datatype
#to be accepted by the function. Due to limitations, the function always gets a table-array, but
#nonetheless the array elements are of the appropriate type. The usable characters are as
#follows (case sensitive):
#s: A string.
#p: A player, by name or name fragment, or noentity() if not found.
#n: A number.
#v: A vector; can be specified as n,n,n or any one of a number of interesting syntaxes:
#   ! : The position you're looking at.
#   !@ : The position of the entity you're looking at
#   !% : The color of the entity you're looking at
#   @ : Your current position
#   @% : Your team color
#   @^ : Your current eye position (your position+your height)
#   [@plyname : The player plyname's current position
#   [^plyname : The player plyname's current eye position
#   [!plyname : The player plyname's current aim position
#   [%plyname : The player plyname's team color
#   %WH : 255,255,255, the color white
#   %RD : 255,0,0, the color red
#   %OR : 255,127,0, the color orange
#   %YL : 255,255,0, the color yellow
#   %GN : 0,255,0, the color green
#   %CY : 0,255,255, the color cyan
#   %BU : 0,0,255, the color blue
#   %VI : 127,0,255, the color violet
#   %MG : 255,0,255, the color magenta
#   %BK : 0,0,0, the color black
#   (For any of the above, append a number n to set intensity; e.g., %WH127 is mid-gray.)
#e: An entity, specified equally interestingly:
#   ! : The entity you're looking at
#   @ : Your entity
#   [@plyname : The player entity of plyname
#   [!plyname : The entity player plyname is looking at
#   %id : Entity with the given ID
#O: Optional. Arguments past this aren't required and shouldn't raise an error if not present.
#r: The rest of the buffer (with quotes removed).
#Your function will receive two arguments. The first is a table-array formatted as above; the second
#is the return table. This is primarily so the function can return custom error codes by setting
#Success[number] to 0 and Reason[string] to a reason why it failed.

#include "lib/string"

function table table:retSetError(Reason:string) {
    This["Success", number]=0
    This["Reason", string]=Reason
    return This
}

function table argsparse(Parts:table, Signature:string) {
    local Optional=0
    local Ret=table()
    Ret["Success", number]=0
    for(I=1,Signature:length()) {
        local Char=Signature:index(I)
        if(Char=="O") {
            Optional=1
            Ret["Success", number]=1
        }
        if(Parts:count()<1) {
            Ret["Reason", string]="Not enough parameters"
            return Ret #With Success=0 if not in optional
        }
        if(Char=="s") {
            Ret:pushString(Parts:removeString(1))
        } elseif(Char=="p") {
            Ret:pushEntity(findPlayerByName(Parts:removeString(1)))
        } elseif(Char=="n") {
            Ret:pushNumber(Parts:removeString(1):toNumber())
        } elseif(Char=="v") {
            local Part=Parts:removeString(1)
            #Oh boy...
            if(Part=="!") {
                Ret:pushVector(owner():aimPos())
            } elseif(Part=="!@") {
                Ret:pushVector(owner():aimEntity():pos())
            } elseif(Part=="!%") {
                Ret:pushVector(owner():aimEntity():getColor())
            } elseif(Part=="@") {
                Ret:pushVector(owner():pos())
            } elseif(Part=="@^") {
                Ret:pushVector(owner():pos()+vec(0, 0, owner():height()))
            } elseif(Part=="@%") {
                Ret:pushVector(teamColor(owner():team()))
            } elseif(Part:left(1)=="[") {
                local Mode=Part:index(2)
                local Ply=findPlayerByName(Part:sub(3))
                if(!Ply) {
                    return Ret:retSetError("Invalid player name: "+Part:sub(3))
                }
                if(Mode=="!") {
                    Ret:pushVector(Ply:aimPos())
                } elseif(Mode=="@") {
                    Ret:pushVector(Ply:pos())
                } elseif(Mode=="^") {
                    Ret:pushVector(Ply:pos()+vec(0, 0, Ply:height()))
                } elseif(Mode=="%") {
                    Ret:pushVector(teamColor(Ply:team()))
                } else {
                    return Ret:retSetError("Unrecognized remote player mode: "+Mode)
                }
            } elseif(Part:left(1)=="%") {
                local Col=Part:sub(2, 3)
                local ColTbl=table()
                ColTbl["WH", vector]=vec(255, 255, 255)
                ColTbl["RD", vector]=vec(255, 0, 0)
                ColTbl["OR", vector]=vec(255, 127, 0)
                ColTbl["YL", vector]=vec(255, 255, 0)
                ColTbl["GN", vector]=vec(0, 255, 0)
                ColTbl["CY", vector]=vec(0, 255, 255)
                ColTbl["BU", vector]=vec(0, 0, 255)
                ColTbl["MG", vector]=vec(255, 0, 255)
                ColTbl["VI", vector]=vec(127, 0, 255)
                ColTbl["BK", vector]=vec(0, 0, 0)
                local Intensity=Part:sub(4)
                local IntenValue=255
                if(Intensity) {
                    IntenValue=Intensity:toNumber()
                }
                local ColV=ColTbl[Col, vector]
                Ret:pushVector(ColV*(IntenValue/255))
            } else {
                local Cmps=Part:explode(",")
                if(Cmps:count()!=3) {
                    return Ret:retSetError("Unknown vector specification: "+Part)
                }
                Ret:pushVector(vec(Cmps[1, string]:toNumber(), Cmps[2, string]:toNumber(), Cmps[3, string]:toNumber()))
            }
        } elseif(Char=="e") {
            local Part=Parts:removeString(1)
            if(Part=="!") {
                Ret:pushEntity(owner():aimEntity())
            } elseif(Part=="@") {
                Ret:pushEntity(owner())
            } elseif(Part:left(1)=="[") {
                local Mode=Part:index(2)
                local Ply=findPlayerByName(Part:sub(3))
                if(!Ply) {
                    return Ret:retSetError("Invalid player name: "+Part:sub(3))
                }
                if(Mode=="@") {
                    Ret:pushEntity(Ply)
                } elseif(Mode=="!") {
                    Ret:pushEntity(Ply:aimEntity())
                } else {
                    return Ret:retSetError("Unknown remote player mode: "+Mode)
                }
            } elseif(Part:left(1) == "%") {
                Ret:pushEntity(entity(Part:sub(2):toNumber()))
            } else {
                return Ret:retSetError("Unknown entity specification: "+Part)
            }
        } elseif(Char=="r") {
            local Buf=""
            for(I=1,Parts:count()) {
                Buf=Buf+Parts[I, string]
            }
            Ret:pushString(Buf)
            Ret["Success", number]=1
            return Ret
        } elseif(Char=="O") {
            #Already handled above
        } else {
            Ret["Reason", string]="Invalid signature specifier: "+Char
            Ret["Success", number]=0
            return Ret
        }
    }
    Ret["Success", number]=1
    return Ret
}

function table newCommand(Name:string, Func:string, Signature:string) {
    local RetT=table()
    RetT["Name", string]=Name
    RetT["Func", string]=Func
    RetT["Signature", string]=Signature
    return RetT
}
function string table:cmName() {
    return This["Name", string]
}

function string table:cmFunc() {
    return This["Func", string]
}

function string table:cmSignature() {
    return This["Signature", string]
}

function void table:cmSetName(Name:string) {
    This["Name", string]=Name
}

function void table:cmSetFunc(Func:string) {
    This["Func", string]=Func
}

function void table:cmSetSignature(Signature:string) {
    This["Signature", string]=Signature
}

function void table:cmSetPrefix(Prefix:string) {
    This["Prefix", string]=Prefix
}

function table table:cmTry(Parts:table) {
    local Name=This:cmName()
    local Ret=table()
    local QName=Name
    local QName2=entity():id():toString()+":"+Name
    Ret["Handled", number]=0
    if(Parts[1, string]==QName|Parts[1, string]==QName2) {
        Ret["Handled", number]=1
        Parts:removeString(1) #Remove the command
        local Args=argsparse(Parts, This:cmSignature())
        Ret["Success", number]=Args["Success", number]
        Ret["Reason", string]=Args["Reason", string]
        if(!Ret["Success", number]) {
            return Ret
        }
        This:cmFunc()(Args, Ret) #Ret is passed to allow the function to set a custom error reason
        return Ret
    }
    return Ret
}

function table newEnv(Prefix:string) {
    local RetT=table()
    RetT["Prefix", string]=Prefix
    return RetT
}

function table newEnv() {
    return newEnv("!")
}

function string table:envPrefix() {
    return This["Prefix", string]
}

function table:envAddCommand(Command:table) {
    This:pushTable(Command)
}
    
function table table:envExecute(Buffer:string) {
    local Parts=qsplit(Buffer)
    for(I=1,This:count()) {
        local Command=This[I, table]
        local Status=Command:cmTry(Parts)
        if(Status["Handled", number]) {
            return Status
        }
    }
    return table()
}

function number table:envExecNoPrefix(Buffer:string) {
    local Status=This:envExecute(Buffer)
    if(Status["Handled", number]) {
        if(!Status["Success", number]) {
            printColor(vec(255, 0, 0), "Command error: "+Status["Reason", string])
        }
        return 1
    }
    return 0
}

function number table:envExec(Buffer:string) {
    local Prefix=This:envPrefix()
    if(Buffer:left(Prefix:length())!=Prefix) {
        return 0
    }
    return This:envExecNoPrefix(Buffer:sub(Prefix:length()+1))
}
