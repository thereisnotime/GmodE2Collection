#Rectangles

#---Constructors---
#Rectangles are assumed to be in a coordinate system where the position Pos
#is less than the position of the opposite corner (Opposite) by an offset of
#a positive Size. (If that isn't the case, one of these constructors should
#be able to craft such a rectangle.)

function table newRect(Pos:vector2, Size:vector2) {
    local Ret=table()
    Ret["Pos", vector2]=Pos
    Ret["Size", vector2]=Size
    return Ret
}

function table newZeroRect() {
    return newRect(vec2(0, 0), vec2(0, 0))
}

function table newRectFromCenterSize(Center:vector2, Size:vector2) {
    return newRect(Center-(Size/2), Size)
}

function table newRectFromCorners(TopLeft:vector2, BottomRight:vector2) {
    return newRect(TopLeft, BottomRight-TopLeft)
}

function table newRectFromLocus(Points:table) {
    if(Points:count()<1) {
        return newZeroRect()
    }
    local Pos=Points:popVector2()
    local Opp=Pos
    for(I=Points:minIndex(), Points:maxIndex()) {
        Pos=minVec(Points[I, vector2], Pos)
        Opp=maxVec(Points[I, vector2], Opp)
    }
    return newRectFromCorners(Pos, Opp)
}

#---Accessors---
#Returns a plethora of useful points. For the purpose of this module, we
#are assumed to be in a coordinate system where positive X is right and
#positive Y is *down*. This matches our expectations for most rendering
#systems, for which this library is intended.

function vector2 table:rcPos() {
    return This["Pos", vector2]
}

function vector2 table:rcSize() {
    return This["Size", vector2]
}

function vector2 table:rcCenter() {
    return This:rcPos()+(This:rcSize()/2)
}

function vector2 table:rcOpposite() {
    return This:rcPos()+This:rcSize()
}

function vector2 table:rcTopLeft() {
    return This:rcPos()
}

function vector2 table:rcTopRight() {
    return vec2(This:rcOpposite():x(), This:rcPos():y())
}

function vector2 table:rcBottomRight() {
    return This:rcOpposite()
}

function vector2 table:rcBottomLeft() {
    return vec2(This:rcPos():x(), This:rcOpposite():y())
}

#---Predicates---
#Returns some useful information about the rectangle that you might
#throw into a conditional test.

function number table:rcIsZero() {
    return This:rcSize()==vec2(0, 0)
}

function number table:rcIsAbnormal() {
    local Size=This:rcSize()
    return Size:x()<0|Size:y()<0
}

function number table:rcIsInvalid() {
    return This:rcIsAbnormal()|This:rcIsZero()
}

function number table:rcIsValid() {
    return !This:rcIsInvalid()
}

function number table:rcContains(Point:vector2) {
    return inrange(Point, This:rcPos(), This:rcOpposite())
}

function number table:rcEquivalent(Other:table) {
    return This:rcPos()==Other:rcPos()&This:rcSize()==Other:rcSize()
}

#---Normalizers---
#There are two ways to deal with a rectangle that has negative size:
#-Normalize it: turn it into a valid rectangle with a positive size.
#-Zero it: turn the negative size dimensions into zeroes.
#Both are valid in their own ways. For example, finding a union would
#normalize the summing rectangle, but finding the clipped rectangle would
#zero it (so if the rectangles did not overlap, a zero-size rectangle is
#returned instead).
#All of these functions return This, allowing this to be used in an
#expression where a valid (or zero) rectangle is needed.

function table table:rcNormalize() {
    local Pos=This:rcPos()
    local Opp=This:rcOpposite()
    This["Pos", vector2]=minVec(Pos, Opp)
    This["Size", vector2]=maxVec(Pos, Opp)-This["Pos", vector2]
    return This
}

function table table:rcZero() {
    This["Size", vector2]=maxVec(This:rcSize(), vec2(0, 0))
    return This
}

#---Operators---
#These operate on multiple rectangles, and return a rectangle as a result.
#For the booleans, consider the following diagram:
#-----------
#|A        |
#|         |
#|    -------------
#|    |B          |
#|----|           |
#     -------------
#A union, computed by the "Unite" operator, will contain both rectangles, as
#well as some space that wasn't occupied by either--in the above diagram, the
#union would span from A's position to B's opposite, and contain the empty
#regions on the bottom left and top right. The union of any set of rectangles
#that contains at least one non-empty rectangle will be non-empty.
#An intersection, computed by the "Intersect" operator, will contain only the
#overlapping region of the rectangles--in the above diagram, it will extend
#from B's position to A's opposite (obscured by B in this diagram). The
#intersection of any set of multiple rectangles may be empty.

function table table:rcUnite(Other:table) {
    local Pos1=This:rcPos()
    local Pos2=Other:rcPos()
    local Opp1=This:rcOpposite()
    local Opp2=Other:rcOpposite()
    return newRectFromCorners(minVec(Pos1, Pos2), maxVec(Opp1, Opp2)):rcNormalize()
}

function table table:rcIntersect(Other:table) {
    local Pos1=This:rcPos()
    local Pos2=Other:rcPos()
    local Opp1=This:rcOpposite()
    local Opp2=Other:rcOpposite()
    return newRectFromCorners(maxVec(Pos1, Pos2), minVec(Opp1, Opp2)):rcZero()
}

