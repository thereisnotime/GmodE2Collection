#Layout Managers

#include "lib/rect"

#---Constructors---

function table newLayout(Screen:table) { #:rect
    local Ret=table()
    Ret["Screen", table]=Screen
    Ret["Objects", table]=table()
    return Ret
}

function table newObject(Layout:table, Rect:table) {
    local Ret=table()
    Ret["Layout", table]=Layout
    Ret["Rect", table]=Rect
    Ret["EventQueue", table]=table()
    return Ret
}

function table newHitResults() {
    local Ret=table()
    Ret["Objects", table]=table()
    Ret["Indices", table]=table()
    return Ret
}

function table newEvent(Type:string) {
    local Ret=table()
    Ret["Type", string]=Type
    return Ret
}

function table newEvent(Type:string, Data:table) {
    local Ret=Data:clone()
    Ret["Type", string]=Type
    return Ret
}

function table newEvent(Type:string, Pos:vector2) {
    local Ret=newEvent(Type)
    Ret["Pos", vector2]=Pos
    return Ret
}

function table newEvent(Type:string, Pos:vector2, Data:table) {
    local Ret=newEvent(Type, Data)
    Ret["Pos", vector2]=Pos
    return Ret
}

#---Accessors---

function table table:lyScreen() {
    return This["Screen", table]
}

function table table:lyObjects() {
    return This["Objects", table]
}

function table table:obLayout() {
    return This["Layout", table]
}

function table table:obRect() {
    return This["Rect", table]
}

function table table:obEventQueue() {
    return This["EventQueue", table]
}

function table table:hrObjects() {
    return This["Objects", table]
}

function table table:hrIndices() {
    return This["Indices", table]
}

function string table:evType() {
    return This["Type", string]
}

function vector2 table:evPos() {
    return This["Pos", vector2]
}

#---Predicates---

function number table:lyRectIntersects(Rect:table) {
    local Objects=This:lyObjects()
    for(I=Objects:minIndex(),Objects:maxIndex()) {
        if(Objects[I, table]:obRect():rcIntersect(Rect):rcIsValid()) {
            return 1
        }
    }
    return 0
}

function number table:lyPointHits(Point:vector2) {
    local Objects=This:lyObjects()
    for(I=Objects:minIndex(),Objects:maxIndex()) {
        if(Objects[I, table]:obRect():rcContains(Point)) {
            return 1
        }
    }
    return 0
}

function number table:lyEntirelyOnScreen(Rect:table) {
    return This:lyScreen():rcEquivalent(This:lyScreen():rcUnite(Rect))
}

function number table:lyPartlyOnScreen(Rect:table) {
    return This:lyScreen():rcIntersect(Rect):rcIsValid()
}

function number table:lyOnScreen(Point:vector2) {
    return This:lyScreen():rcContains(Point)
}

function number table:obHasEvents() {
    return This:obEventQueue():count()
}

function number table:hrCount() {
    return This:hrObjects():count()
}

function number table:evHasPos() {
    return This:exists("Pos")
}

#---Operations---

function number table:lyAddObject(Object:table) {
    This["Objects", table]:pushTable(Object)
    return This["Objects", table]:maxIndex()
}

function table table:lyRemoveObject(Index:number) {
    return This["Objects", table]:removeTable(Index)
}

function void table:obFire(Event:table) {
    This:obEventQueue():pushTable(Event)
}

function table table:obGetEvent() {
    return This:obEventQueue():removeTable(This:obEventQueue():minIndex())
}

function table:hrNewHit(Object:table, Index:number) {
    This["Objects", table]:pushTable(Object)
    This["Indices", table]:pushNumber(Index)
}

#---Tests---

function table table:lyQueryRect(Rect:table) {
    local Objects=This:lyObjects()
    local Ret=newHitResults()
    for(I=Objects:minIndex(),Objects:maxIndex()) {
        if(!Objects[I, table]:obRect():rcIntersect(Rect):rcIsZero()) {
            Ret:hrNewHit(Objects[I, table], I)
        }
    }
    return Ret
}

function table table:lyQueryPoint(Point:vector2) {
    local Objects=This:lyObjects()
    local Ret=newHitResults()
    for(I=Objects:minIndex(),Objects:maxIndex()) {
        if(Objects[I, table]:obRect():rcContains(Point)) {
            Ret:hrNewHit(Objects[I, table], I)
        }
    }
    return Ret
}

function void table:lyFire(Event:table) {
    local Objects=table()
    if(Event:evHasPos()) {
        Objects=This:lyQueryPoint(Event:evPos())
    } else {
        Objects=This:lyObjects()
    }
    for(I=Objects:minIndex(),Objects:maxIndex()) {
        Objects[I, table]:obFire(Event)
    }
}
