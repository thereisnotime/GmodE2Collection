@name libCoroutine

#Coroutines: a method of high-bandwidth execution

function table newRoutine(Func:string, State:table) {
    local RetT=table()
    RetT["Func", string]=Func
    RetT["State", table]=State
    RetT["Iters", number]=0
    RetT["IterLimit", number]=-1
    return RetT
}

function string table:rtFunc() {
    return This["Func", string]
}

function table table:rtState() {
    return This["State", table]
}

function number table:rtIters() {
    return This["Iters", number]
}

function number table:rtIterLimit() {
    return This["IterLimit", number]
}

function void table:rtSetFunc(Func:string) {
    This["Func", string]=Func
}

function void table:rtSetState(State:table) {
    This["State", table]=State
}

function void table:rtSetIters(Iters:number) {
    This["Iters", number]=Iters
}

function void table:rtSetIterLimit(IterLimit:number) {
    This["IterLimit", number]=IterLimit
}

function void table:rtIncIters() {
    This:rtSetIters(This:rtIters()+1)
}

function void table:rtExec(Sched:table) {
    This:rtFunc()(This:rtState(), This, Sched)
    This:rtIncIters()
}

#----------------

function table newScheduler() {
    local RetT=table()
    RetT["Sleeping", table]=table()
    return RetT
}

function table table:coSleeping() {
    return This["Sleeping", table]
}

function void table:coSchedule(Routine:table) {
    This:pushTable(Routine)
}

function void table:coSchedSleep(Routine:table) {
    This:coSleeping():pushTable(Routine)
}

function void table:coWakeAll() {
    local Sleeping=This:coSleeping()
    while(Sleeping:count()) {
        This:coSchedule(Sleeping:removeTable(1))
    }
}

function void table:coClearCounters() {
    for(I=1,This:count()) {
        This[I, table]:rtSetIters(0)
    }
}

function void table:coRun(Quota:number) {
    This:coWakeAll()
    This:coClearCounters()
    while(perf(Quota)&This:keys():max()) {
        local Routine=This:removeTable(1)
        local IL=Routine:rtIterLimit()
        if(IL>=0&Routine:rtIters()>=IL) {
            This:coSchedSleep(Routine)
        } else {
            Routine:rtExec(This)
        }
    }
}

function void table:coRun() {
    This:coRun(100)
}

#----------------

function table newIterator(Func:string, Array:table, State_:table, OnFinish:string) {
    local State=table()
    State["Func", string]=Func
    State["Array", table]=Array
    State["State", table]=State_
    State["OnFinish", string]=OnFinish
    return newRoutine("itRun", State)
}

function table newIterator(Func:string, Array:table, State:table) {
    return newIterator(Func, Array, State, "")
}

function table newIterator(Func:string, Array:table) {
    return newIterator(Func, Array, table())
}

function string table:itFunc() {
    return This["Func", string]
}

function table table:itArray() {
    return This["Array", table]
}

function table table:itState() {
    return This["State", table]
}

function string table:itOnFinish() {
    return This["OnFinish", string]
}

function table:itSetFunc(Func:string) {
    This["Func", string]=Func
}

function table:itSetArray(Array:table) {
    This["Array", table]=Array
}

function table:itSetState(State:table) {
    This["State", table]=State
}

function table:itSetOnFinish(OnFinish:string) {
    This["OnFinish", string]=OnFinish
}

function table table:itRun(Routine:table, Sched:table) {
    local Array=This:itArray()
    This:itFunc()(Array, This:itState())
    Array:remove(1)
    if(Array:count()) {
        Sched:coSchedule(Routine)
    } else {
        if(This:itOnFinish()) {
            This:itOnFinish()(This, Sched)
        }
    }
}

#----------------


