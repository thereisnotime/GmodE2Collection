#EGP Event Source (for input events)

#include "lib/egp_layout"

function table plKeyState(Player:entity) {
    #Commented out some useless ones, tell me if you need these.
    local Ret=table()
    if(Player:keyAttack1()) {Ret["Attack1", number]=1}
    if(Player:keyAttack2()) {Ret["Attack2", number]=1}
    #if(Player:keyBack()) {Ret["Back", number]=1}
    #if(Player:keyDuck()) {Ret["Duck", number]=1}
    #if(Player:keyForward()) {Ret["Forward", number]=1}
    #if(Player:keyJump()) {Ret["Jump", number]=1}
    #if(Player:keyLeft()) {Ret["Left", number]=1}
    #if(Player:keyLeftTurn()) {Ret["LeftTurn", number]=1}
    if(Player:keyReload()) {Ret["Reload", number]=1}
    #if(Player:keyRight()) {Ret["Right", number]=1}
    #if(Player:keyRightTurn()) {Ret["RightTurn", number]=1}
    if(Player:keySprint()) {Ret["Sprint", number]=1}
    if(Player:keyUse()) {Ret["Use", number]=1}
    if(Player:keyWalk()) {Ret["Walk", number]=1}
    #if(Player:keyZoom()) {Ret["Zoom", number]=1}
    return Ret
}

function table newEGPInputEventSource(EGPLayout:table) {
    local Ret=table()
    Ret["Layout", table]=EGPLayout
    Ret["PlayerStates", table]=table()
    return Ret
}

function table newPlayerState(EIS:table, Player:entity) {
    local Ret=table()
    Ret["EIS", table]=EIS
    Ret["Player", entity]=Player
    Ret["Objects", table]=table()
    Ret["Pos", vector2]=vec2(-1, -1)
    Ret["Keys", table]=table()
    return Ret
}

function table newEnterEvent(Player:entity, Pos:vector2) {
    local Data=table()
    Data["Player", entity]=Player
    return newEvent("Input.Enter", Pos, Data)
}

function table newLeaveEvent(Player:entity, Pos:vector2) {
    local Data=table()
    Data["Player", entity]=Player
    return newEvent("Input.Leave", Pos, Data)
}

function table newLeaveEvent(Player:entity, Pos:vector2) {
    local Data=table()
    Data["Player", entity]=Player
    return newEvent("Input.Leave", Pos, Data)
}

function table newMoveEvent(Player:entity, Pos:vector2) {
    local Data=table()
    Data["Player", entity]=Player
    return newEvent("Input.Leave", Pos, Data)
}

function table newKeyPressEvent(Player:entity, Pos:vector2, Key:string) {
    local Data=table()
    Data["Player", entity]=Player
    Data["Key", string]=Key
    return newEvent("Input.KeyPress", Pos, Data)
}

function table newKeyReleaseEvent(Player:entity, Pos:vector2, Key:string) {
    local Data=table()
    Data["Player", entity]=Player
    Data["Key", string]=Key
    return newEvent("Input.KeyRelease", Pos, Data)
}

function table table:eisLayout() {
    return This["Layout", table]
}

function table table:eisPlayerStates() {
    return This["PlayerStates", table]
}

function table table:eisPlayerState(Player:entity) {
    local States=This:eisPlayerStates()
    if(!States:exists(Player:steamID())) {
        States[Player:steamID(), table]=newPlayerState(This, Player)
    }
    return This:eisPlayerStates()[Player:steamID(), table]
}

function table table:pstEIS() {
    return This["EIS", table]
}

function entity table:pstPlayer() {
    return This["Player", entity]
}

function table table:pstObjects() {
    return This["Objects", table]
}

function vector2 table:pstPos() {
    return This["Pos", vector2]
}

function table table:pstKeys() {
    return This["Keys", table]
}

function void table:pstSetObjects(Objects:table) {
    This["Objects", table]=Objects
}

function void table:pstSetPos(Pos:vector2) {
    This["Pos", vector2]=Pos
}

function void table:pstSetKeys(Keys:table) {
    This["Keys", table]=Keys
}

function void table:pstEnter(Object:table, Pos:vector2) {
    Object:obFire(newEnterEvent(This:pstPlayer(), Pos))
}

function void table:pstLeave(Object:table, Pos:vector2) {
    Object:obFire(newLeaveEvent(This:pstPlayer(), Pos))
}

function void table:pstUpdate(Layout:table) {
    local Player=This:pstPlayer()
    local Pos=Layout:elyManager():emEGP():egpCursor(Player)
    local NewKeys=plKeyState(Player)
    local OldKeys=This:pstKeys()
    local Pressed=NewKeys:clone():difference(OldKeys):keys()
    local Released=OldKeys:clone():difference(NewKeys):keys()
    for(I=Pressed:minIndex(),Pressed:maxIndex()) {
        Layout:lyFire(newKeyPressEvent(Player, Pos, Pressed[I, string]))
    }
    for(I=Released:minIndex(),Released:maxIndex()) {
        Layout:lyFire(newKeyPressEvent(Player, Pos, Released[I, string]))
    }
    This:pstSetKeys(NewKeys)
    if(This:pstPos()==Pos) {
        return
    }
    local NewObjects=This:pstEIS():eisLayout():lyQueryPoint(Pos)
    local OldObjects=This:pstObjects()
    local Entered=NewObjects:clone():difference(OldObjects)
    local Left=OldObjects:clone():difference(NewObjects)
    for(I=Entered:minIndex(),Entered:maxIndex()) {
        This:pstEnter(Entered[I, table], Pos)
    }
    for(I=Left:minIndex(),Left:maxIndex()) {
        This:pstLeave(Left[I, table], Pos)
    }
    for(I=NewObjects:minIndex(),NewObjects:maxIndex()) {
        NewObjects[I, table]:obFire(newMoveEvent(Player, Pos))
    }
    This:pstSetObjects(NewObjects)
    This:pstSetPos(Pos)
}

function void table:eisTick() {
    local Players=players()
    for(I=Players:minIndex(),Players:maxIndex()) {
        local Player=Players[I, entity]
        local State=This:eisPlayerState(Player)
        State:pstUpdate(This:eisLayout())
    }
}
