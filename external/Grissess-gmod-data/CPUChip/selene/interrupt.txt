#ifndef SELENE_INTERRUPT
#define SELENE_INTERRUPT

#include <selene/cpu.txt>
#include <selene/printk.txt>
#include <selene/std.txt>
#include <selene/panic.txt>

#define INT_SYSCALL 32
//#define NUM_INTERRUPTS (INT_SYSCALL + 1)
#define NUM_INTERRUPTS 33
//#define SIZEOF_INTR_TBL (NUM_INTERRUPTS * SIZEOF_IVEC)
#define SIZEOF_INTR_TBL 132

#define IMODE_INTERNAL 1
// Stack is an iframe
#define IMODE_EXTERNAL 2
// Stack is an xiframe
#define IMODE_EXTERNAL_PUSHR 3
// Stack is an xirframe
#define IMODE_ARTIFICIAL 4
// Stack is undefined

char interrupt_table[SIZEOF_INTR_TBL];
char interrupt_handlers[NUM_INTERRUPTS];

void interrupt_no_handler(char *stack, char mode, char intr, char ladd) {
    panic("Unknown interrupt %d:%p mode %d at ESP %p\n", intr, ladd, mode, stack);
}

char interrupt_was_external(char *stack, char intr, char ladd) {
    iframe *istack = stack;
    xiframe *xistack = stack;
    xirframe *xirstack = stack;
    ivec *intr_vec;
    // This method is entirely heuristic; there's actually no way to know if
    // a given interrupt was called externally by direct observation of the
    // processor state.
    // Test 1: No processor trap (which sets a nonzero LADD) is called externally;
    // rephrased, VM:ExternalInterrupt calls VM:Interrupt with LADD = 0
    if(ladd != 0) return 0;
    // Test 2: If IF_EXT is not set in the interrupt table, attempting to call
    // this interrupt would have raised 13:4 instead (which fails test 1)
    intr_vec = interrupt_get_vector(intr);
    if(!(intr_vec.flags & IF_EXT)) return 0;
    // Test 3: If there's a mismatch in the redundant xiframe CS/IP regs, it
    // can't be an extint. This is complicated a bit by IF_PUSHR.
    if(xistack.cs_ != xistack._cs_) {
        if(xirstack.cs_ != xirstack._cs_) return 0;
    }
    if(xistack.ip_ != xistack._ip_) {
        if(xirstack.ip_ != xirstack._ip_) return 0;
    }
    // Test 4: Check if it looks like the stored xiframe ESP is correct. This
    // is also complicated by IF_PUSHR
    // The offsets are VERY MAGIC.
    if(xistack._esp_ != stack + 10) {
        if(xirstack._esp_ != stack + 42) return 0;
    }
    // There's a high enough likelihood to conclude this was probably external.
    // NB: The wrong conclusion in this function can smash the stack and
    // destroy all memory protections.
    return 1;
}

ivec *interrupt_get_vector(char intr) {
    return insn_cpuget(REG_IDTR) + intr * SIZEOF_IVEC;
}

void interrupt_handle(char *stack, char intr, char ladd) {
    char was_external = interrupt_was_external(stack, intr, ladd);
    ivec *intr_vec = interrupt_get_vector(intr);
    char mode;
    if(was_external) {
        if(intr_vec.flags & IF_PUSHR) {
            mode = IMODE_EXTERNAL_PUSHR;
        } else {
            mode = IMODE_EXTERNAL;
        }
    } else {
        mode = IMODE_INTERNAL;
    }
    if(intr != to_int(intr)) {
        panic("Non-integer interrupt %f:%p\n", intr, ladd);
    }
    interrupt_trigger(stack, mode, intr, ladd);
    return mode;
}

void interrupt_trigger(char *stack, char mode, char intr, char ladd) {
    char *handler;
    if(intr > NUM_INTERRUPTS) {
        panic("Interrupt beyond NIDT %d:%p\n", intr, ladd);
    }
    handler = interrupt_handlers[intr];
    handler(stack, mode, intr, ladd);
}

interrupt_trampoline:
    CLI;
    CPUGET [ES:-5], REG_LINT;
    CPUGET [ES:-6], REG_LADD;
    PUSHA;
    MOV EAX, ESP;
    ADD EAX, SIZEOF_PUSHAFRAME;
    CPUGET EBX, REG_LADD;
    PUSH EBX;
    CPUGET EBX, REG_LINT;
    PUSH EBX;
    PUSH EAX;
    MOV ECX, 3;
    CALL interrupt_handle;
    ADD ESP, 3;
    CMP EAX, IMODE_INTERNAL;
    JE _interrupt_not_external;
    CMP EAX, IMODE_EXTERNAL;
    JE _interrupt_ext_no_rn;
    POPA;
    EXTRETA;
_interrupt_ext_no_rn:
    POPA;
    EXTRET;
_interrupt_not_external:
    POPA;
    IRET;

void interrupt_init() {
    char i;
    debug_printkln("interrupt_init\n");
    for(i = 0; i < NUM_INTERRUPTS; i++) {
        interrupt_table[SIZEOF_IVEC * i] = interrupt_trampoline;
        interrupt_table[SIZEOF_IVEC * i + 1] = 0;  // = CS;
        interrupt_table[SIZEOF_IVEC * i + 3] = IF_ACTIVE | IF_EXT | IF_PUSHR;
        interrupt_handlers[i] = interrupt_no_handler;
    }
    interrupt_set_cs(insn_cpuget(REG_CS));
    debug_printkln("installing IDTR at %p num %d size %d\n", interrupt_table, NUM_INTERRUPTS, SIZEOF_INTR_TBL);
    insn_cpuset(REG_IDTR, interrupt_table);
    insn_cpuset(REG_NIDT, NUM_INTERRUPTS);
    STEF;
    STI;
    debug_printkln("interrupts enabled\n");
}

void interrupt_set_cs(char cs_) {
    char i;
    debug_printkln("interrupt_set_cs %p\n", cs_);
    for(i = 0; i < NUM_INTERRUPTS; i++) {
        interrupt_table[SIZEOF_IVEC * i + 1] = cs_;
    }
    printkln("interrupts prepared for segment %p\n", cs_);
}

void interrupt_install(char intr, char *handler) {
    if(intr < 0 || intr >= NUM_INTERRUPTS) {
        printkln("attempted to install handler for invalid interrupt %d\n", intr);
        return;
    }
    debug_printkln("installing handler for %d\n", intr);
    interrupt_handlers[intr] = handler;
}

char *interrupt_get(char intr) {
    if(intr < 0 || intr >= NUM_INTERRUPTS) {
        return 0;
    }
    return interrupt_handlers[intr];
}

#endif
