#ifndef SELENE_PANIC
#define SELENE_PANIC

#include <selene/cpu.txt>
#include <selene/printk.txt>

#define INT_PANIC 1

struct panic_entry {
    char *on_panic;
    char *next;
}

panic_entry *panic_callbacks = 0;

void add_panic_entry(panic_entry *pe) {
    pe.next = panic_callbacks;
    panic_callbacks = pe;
}

void panic_run_callbacks() {
    panic_entry *cur = panic_callbacks;
    char *func;
    while(cur != 0) {
        func = cur.on_panic;
        func();
        cur = cur.next;
    }
}

void panic_halt() {
    //panic_run_callbacks();
    CLEF;
    INT INT_PANIC;
}

void panic_dump_regs(pushaframe *frame) {
    char i;
    printkln("EAX = %p EBX = %p ECX = %p EDX = %p\n", frame.eax_, frame.ebx_, frame.ecx_, frame.edx_);
    printkln("ESP = %p EBP = %p ESI = %p EDI = %p\n", frame._esp_, frame.ebp_, frame.esi_, frame.edi_);
    /*printk("Rn: ");
    for(i = 0; i < REG_R_SZ; i++) {
        printk("%d=%p ", i, insn_cpuget(REG_R0 + i));
    }
    printk("\n");*/
}

void panic_backtrace(char *base) {
    printkln("Backtrace: ");
    while(base) {
        printk("/ EBP = %p IP = %p(%d) ", base, base[1], base[1]);
        base = *base;
    }
    printk("/ NULL\n");
}

string panic_header, "panic: ";

panic:
    MOV [ES:-8], [EBP:1];
    PUSHA;
    CALL printk_is_ready;
    CMP EAX, 0
    JE panic_halt;
    MOV EAX, ESP;
    PUSH EAX;
    MOV ECX, 1;
    CALL panic_dump_regs;
    ADD ESP, 1;
    PUSH EBP;
    MOV ECX, 1;
    CALL panic_backtrace;
    ADD ESP, 1;
    PUSH panic_header;
    MOV ECX, 1
    CALL printkln;
    ADD ESP, 1;
    POPA;
    MOV [ESP:1], panic_halt;  // Id est, ROP into panic_halt
    JMP printk;

#endif
