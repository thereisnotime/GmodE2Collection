//#ifndef LUNOS_LLPOOL
#define LUNOS_LLPOOL

//#pragma set OutputDebugListing true
//#pragma set OutputBinaryListing true
//#pragma set OutputTokenListing true
//#pragma set OutputCodeTree true
//#pragma set OutputFinalListing true
//#pragma set OutputResolveListing true

//LunOS -- Lunar Operating System
//llpool -- Linked List Pool

//A linked list pool of statically allocated memory.

//The LLPool works on sets of bytes known as cells, which have a fixed size established at the
//creation of the pool. The pool never allocates any more memory than it has--it is considered
//to be static, and will return failure if it cannot allocate a cell.

//The purpose of such a structure is to provide easy reordering and deletion. Prepending a cell
//is faster than appending a cell, but both can be completed with reasonable speed with small
//pools.

//The LLPool has a fixed-size header of three bytes: the first (@0) is the pointer to the first
//cell, the second is the cell size, and the third is the number of bytes in the structure
//(including the header). (Extra bytes that cannot be formed into cells will remain unused.) Each cell has
//a two byte header: the first is the address of the next cell, and the second is the address
//of the previous cell. (All addresses are specified relative to the data segment.) Either may
//be 0 if the specified cell does not exist. (0 is illegal as a cell address because the pool
//header will always occupy three bytes.) A cell in which both addresses are 0 is unused. (The
//first cell's previous address, being the only cell, will point to the beginning of the pool.)

//LunOS -- Lunar Operating System
//basic -- Basic

//Just includes an amalgam of basic typedefs and constants used across the system.

//Typedefs:
#define VOID_P char*
#define VOID_P_P char**
#define SIZE_T char
#define STATUS_T char

//Constants:
#define NULL 0

//Error codes:
#define E_SUCCESS 0
//Success.
#define E_NOMEM 1
//No memory or space exists to carry out the operation.
#define E_NOACCESS 2
//Access to the resource is not allowed by the current policy.
#define E_NOEXIST 3
//The referenced entity does not exist.
#define E_EXISTS 4
//The referenced entity exists.
#define E_INVALID 5
//An invalid parameter was encountered.
#define E_BOUNDS 6
//The operation would be performed outside of memory boundaries.

#define LLPOOL_HDR_SZ 3
#define LLPOOL_CELL_HDR_SZ 2

#define LLPHDR_IDX_FCELL 0
#define LLPHDR_IDX_CSZ 1
#define LLPHDR_IDX_SPAN 2

#define LLPCLL_IDX_NEXT 0
#define LLPCLL_IDX_PREV 1

//STATUS_T LLPInit(void *mem, size_t span, size_t cellsize)
//Initializes an LLPool. mem points to the start of the span of span bytes (!), and will
//contain cells of cellsize bytes in length. cellsize must be at least two to accomodate cell
//headers. After this routine returns (successfully), you may use mem to refer to the pool
//in all other LLPool.
STATUS_T LLPInit(VOID_P mem, SIZE_T span, SIZE_T cellsize) {
  if(span<LLPOOL_HDR_SZ) {
    return E_NOMEM;
  }
  if(cellsize<LLPOOL_CELL_HDR_SZ) {
    return E_INVALID;
  }
  mem[LLPHDR_IDX_FCELL]=NULL; //No first cell.
  mem[LLPHDR_IDX_CSZ]=cellsize;
  mem[LLPHDR_IDX_SPAN]=span;
  return E_SUCCESS;
}

//void *LLPNextFreeCell(void *mem)
//Returns a pointer to the next unused cell (doing a linear search for one until one is
//encountered), or returns NULL if no such cell exists.
VOID_P LLPNextFreeCell(VOID_P mem) {
  VOID_P i;
  SIZE_T sz;
  SIZE_T csz;
  sz=mem[LLPHDR_IDX_SPAN];
  csz=mem[LLPHDR_IDX_CSZ];
  i=mem+LLPOOL_HDR_SZ;
  while(i<sz) {
    if(i[LLPCLL_IDX_NEXT]==NULL && i[LPCLL_IDX_PREV]==NULL) {
      return i;
    }
    i=i+csz;
  }
  return NULL;
}

//void *LLPLastCell(void *mem)
//Returns a pointer to the last cell, or NULL if there is no cell.
VOID_P LLPLastCell(VOID_P mem) {
  VOID_P cell;
  VOID_P next;
  cell=mem[LLPHDR_IDX_FCELL];
  if(cell==NULL) {
    return NULL;
  }
  next=cell;
  while(next!=NULL) {
    cell=next;
    next=next[LLPCLL_IDX_NEXT];
  }
  return cell;
}

//size_t LLPCells(void *mem)
//Returns the number of cells in an LLP. (WARNING: This will hang if the list has a cycle!)
SIZE_T LLPCells(VOID_P mem) {
  SIZE_T i;
  VOID_P cell;
  cell=mem[LLPHDR_IDX_FCELL];
  while(cell!=NULL) {
    i=i+1;
    cell=cell[LLPCLL_IDX_NEXT];
  }
  return i;
}

//STATUS_T LLPAppendCell(void *mem, void **cell)
//Appends a cell to the current last cell in the list. The cell is returned by reference
//in the cell parameter.
STATUS_T LLPAppendCell(VOID_P mem, VOID_P_P cell) {
  VOID_P lastcell;
  VOID_P newcell;
  newcell=LLPNextFreeCell(mem);
  if(newcell==NULL) {
    return E_NOMEM;
  }
  lastcell=LLPLastCell(mem);
  if(lastcell==NULL) { //An optimization--the cell we're creating is the first cell.
    mem[LLPHDR_IDX_FCELL]=newcell;
    newcell[LLPCLL_IDX_PREV]=mem;
  } else {
    lastcell[LLPCLL_IDX_NEXT]=newcell;
    newcell[LLPCLL_IDX_PREV]=lastcell;
  }
  *cell=newcell;
  return E_SUCCESS;
}

//STATUS_T LLPPrependCell(void *mem, void **cell)
//Prepends a cell to the current first cell in the list. The new cell is returned by
//reference in the cell parameter.
STATUS_T LLPPrependCell(VOID_P mem, VOID_P_P cell) {
  VOID_P firstcell;
  VOID_P newcell;
  newcell=LLPNextFreeCell(mem);
  if(newcell==NULL) {
    return E_NOMEM;
  }
  firstcell=mem[LLPHDR_IDX_FCELL];
  if(firstcell==NULL) {
    mem[LLPHDR_IDX_FCELL]=newcell;
    newcell[LLPCLL_IDX_PREV]=mem;
  } else {
    firstcell[LLPCLL_IDX_PREV]=newcell;
    mem[LLPHDR_IDX_FCELL]=newcell;
    newcell[LLPCLL_IDX_NEXT]=firstcell;
    newcell[LLPCLL_IDX_PREV]=mem;
  }
  *cell=newcell;
  return E_SUCCESS;
}

//STATUS_T LLPRemoveCell(void *mem, void *cell)
//Removes the cell as referenced. It is marked as unused and can be reallocated as
//another cell if needed. (WARNING: As this cell can be recycled nearly immediately,
//you should ensure that you do not leave dangling pointers to it, as this may cause
//data corruption.)
STATUS_T LLPRemoveCell(VOID_P mem, VOID_P cell) {
  VOID_P tmpcell;
  tmpcell=cell[LLPCLL_IDX_NEXT];
  if(tmpcell!=NULL) {
    tmpcell[LLPCLL_IDX_PREV]=cell[LLPCLL_IDX_PREV];
  }
  tmpcell=cell[LLPCLL_IDX_PREV];
  if(tmpcell!=NULL) {
    if(tmpcell==mem) {
      mem[LLPHDR_IDX_FCELL]=cell[LLPCLL_IDX_NEXT];
    } else {
      tmpcell[LLPCLL_IDX_NEXT]=cell[LLPCLL_IDX_NEXT];
    }
  }
  return E_SUCCESS;
}

//STATUS_T LLPSwapCells(void *mem, void *cella, void *cellb)
//Swaps two cells in place by exchanging their links.
//Although untested, this should work stably if cella==cellb.
STATUS_T LLPSwapCells(VOID_P mem, VOID_P cella, VOID_P cellb) {
  VOID_P anext;
  VOID_P aprev;
  VOID_P bnext;
  VOID_P bprev;
  anext=cella[LLPCLL_IDX_NEXT];
  aprev=cella[LLPCLL_IDX_PREV];
  bnext=cellb[LLPCLL_IDX_NEXT];
  bprev=cellb[LLPCLL_IDX_PREV];
  //Only the prev cells can (possibly) be mem.
  if(aprev==mem) {
    mem[LLPHDR_IDX_FCELL]=cellb;
  } else {
    aprev[LLPCLL_IDX_NEXT]=cellb;
  }
  if(bprev==mem) {
    mem[LLPHDR_IDX_FCELL]=cella;
  } else {
    bprev[LLPCLL_IDX_NEXT]=cella;
  }
  //Set the next links...
  anext[LLPCLL_IDX_PREV]=cellb;
  bnext[LLPCLL_IDX_PREV]=cella;
  //And, finally, relink the cells' internal links.
  cella[LLPCLL_IDX_NEXT]=bnext;
  cella[LLPCLL_IDX_PREV]=bprev;
  cellb[LLPCLL_IDX_NEXT]=anext;
  cellb[LLPCLL_IDX_PREV]=aprev;
  return E_SUCCESS;
}

//#endif
