/*
PLFR1001R -- Programmable Low-Frequency Radio Processor Receiver

IOBus <- Data Port
MemBus <- Any memory receiver (another Data Port is useful)

IOBus port0 in: WDR RF channel in
IOBus port1 in: WDR RF channel hasSignal
IOBus port2 in: WDR RF channel dBmW (optional)
IOBus port
IOBus port0 out: WDR RF channel out (on different band)

Protocol: All commands are positive-valued and acknowledged by receiving a negative value on the downlink.

0: RESET: Receiving this value confirms that the processor is ready to receive commands. Sending is a NOP.
1: PING; Replies -1. Follow with RESET. Useful to test link liveness.
2: SET: Set a parameter. Protocol:
  - Send SET (2). Await -2.
  - Send -1. Await -1.
  - Send address. Await -2.
  - Send value. Await address for confirmation.
  - Send SET (2). Await data for confirmation.
  - Send RESET (0). Await 0 for next command.
The address is relative to the external MemBus.
3: GET: Get a parameter. Protocol:
  - Send GET (3). Await -3.
  - Send -1. Await -1.
  - Send address. Await -3.
  - Send GET (3). Await value.
  - Send RESET (0). Await 0 for next command.
4: RXSTATUS: Replies with the current dBmW for as long as 4 is asserted.
5: SN: Replies with the processor serial number for as long as 5 is asserted.

*/

CPUGET edi, 43
// Any site-specific default values go here

MOV [edi:0], 25
MOV [edi:1], 45
MOV [edi:2], 1
MOV [edi:3], 500
MOV [edi:4], [edi:0]
MOV [edi:5], 1
/*
MOV #65536, 25
MOV #65537, 45
*/
// End default values
JMP start

handlers:
    DB handle_reset, handle_ping, handle_set, handle_get, handle_rxstatus, handle_sn
handlers_end:
    DB 0
    
last_datum:
    DB 0
    
get_datum:
    CMP port1, 0
    JNE read_datum
    IDLE
    JMP get_datum
read_datum:
    MOV port5, [last_datum]
    CMP port0, [last_datum]
    JE get_datum
    MOV eax, port0
    MOV [last_datum], eax
    RET
    
xfer_datum:
    MOV port0, eax
    JMP get_datum

idle_then_start:
    IDLE
start:
    MOV port0, 0
    CALL get_datum
    MOV ebx, handlers
    ADD ebx, eax
    CMP ebx, handlers_end
    JGE idle_then_start
    CALL [ebx]
    JMP idle_then_start
    
handle_reset:
    MOV port0, 0
    RET
    
idle_then_handle_ping:
    IDLE
handle_ping:
    MOV port0, -1
    CMP port0, 1
    JE idle_then_handle_ping
    RET
    
handle_set:
    MOV eax, -2
    CALL xfer_datum
    CMP eax, -1
    JE continue_set
    RET
continue_set:
    MOV eax, -1
    CALL xfer_datum
    MOV ecx, eax
    MOV eax, -2
    CALL xfer_datum
    MOV [edi:ecx], eax
    MOV edx, eax
    MOV port7, eax
    MOV port6, 1
    MOV eax, ecx
    MOV port6, 2
    CALL xfer_datum
    MOV port6, 3
    MOV eax, edx
    MOV port6, 4
    CALL xfer_datum
    MOV port6, 5
    RET
    
handle_get:
    MOV eax, -3
    CALL xfer_datum
    CMP eax, -1
    JE continue_get
    RET
continue_get:
    MOV eax, -1
    CALL xfer_datum
    MOV ecx, eax
    MOV eax, -3
    CALL xfer_datum
    MOV eax, [edi:ecx]
    CALL xfer_datum
    RET

handle_rxstatus:
    CMP port0, 4
    JE continue_rxstatus
    RET
continue_rxstatus:
    MOV port0, port2
    JMP handle_rxstatus
    
handle_sn:
    CMP port0, 5
    JE continue_sn
    RET
continue_sn:
    CPUGET eax, 48
    MOV port0, eax
    JMP handle_sn
