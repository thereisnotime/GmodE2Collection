//LunOS -- Lunar Operating System
//clist -- Cell Lists

//Cell lists are a logical expansion of lists--instead of allocating only one byte at a time,
//they operate on cells of bytes (of a fixed size). As such, they have one extra header
//member than lists, and cannot be used interchangeably.

//Cell lists provide excellent ways of structuring a statically allocated memory block into
//data structures, which are often needed. Being statically allocated, they cannot change size,
//and operations will fail when they become full.

//#pragma set OutputDebugListing true
//#pragma set OutputBinaryListing true
//#pragma set OutputTokenListing true
//#pragma set OutputCodeTree true
//#pragma set OutputFinalListing true
#pragma set OutputResolveListing true
#pragma set NoUnreferencedLeaves false

#ifndef LUNOS_CLIST
#define LUNOS_CLIST

#define CLST_NUM 0
#define CLST_MAX 1
#define CLST_SZ 2
#define CLST_LIST 3

char CListContains(char *list, char value) {
    char i;
    for(i=CLST_LIST; i<list[CLST_NUM]*list[CLST_SZ]+CLST_LIST; i+=list[CLST_SZ]) {
        if(list[i]==value) {
            return 1;
        }
    }
    return 0;
}

//Anywhere you see value, note that it is a pointer to a memory buffer, assumed to be
//an array-or-structure of list[CLST_SZ] bytes.
char CListIndex(char *list, char *value) {
    char i;
    char k;
    char found;
    for(i=CLST_LIST; i<list[CLST_NUM]*list[CLST_SZ]+CLST_LIST; i+=list[CLST_SZ]) {
        found=1;
        for(k=0; k<list[CLST_SZ]; k++) {
            if(list[CLST_LIST+i+k]!=value[k]) {
                found=0;
                break;
            }
        }
        if(found) {
            return (i-CLST_LIST)/list[CLST_SZ] //XXX will this always return an integer?
        }
    }
    return -1;
}

char CListAppend(char *list, char *value) {
    char k;
    if(list[CLST_NUM]<list[CLST_MAX]) {
        list[CLST_NUM]++;
        for(k=0; k<list[CLST_SZ]; k++) {
            list[CLST_LIST+k+list[CLST_NUM]*list[CLST_SZ]]=value[k];
        }
        return 1;
    }
    return 0;
}

char CListRemove(char *list, char *value) {
    char i;
    char j;
    char k;
    char found;
    for(i=CLST_LIST; i<list[CLST_NUM]*list[CLST_SZ]+CLST_LIST; i+=list[CLST_SZ]) {
        found=1;
        for(k=0; k<list[CLST_SZ]; k++) {
            if(list[CLST_LIST+i+k]!=value[k]) {
                found=0;
                break;
            }
        }
        if(found) {
            for(j=i; j<list[CLST_NUM]*list[CLST_SZ]+CLST_LIST-1; j++) { //Bytewise, note this.
                list[j]=list[j+1];
            }
            list[CLST_NUM]--;
            return 1;
        }
    }
    return 0;
}

//These functions will remain in the public API for safe use elsewhere.
//(In here, the code is optimized a bit more.)

char *CListAddress(char *list, char index) {
    return list+CLST_LIST+index*list[CLST_SZ];
}

char CListSize(char *list) {
    return list[CLST_NUM];
}

//You MUST call this to initialize the list. Otherwise, CLST_MAX will be
//zero, and you won't be able to append anything. (Or, worse, CLST_MAX
//could point to random data, and your list could corrupt memory.)
//The bytewise size of the list will be CLST_LIST+size*cellsz.
void CListInit(char *list, char size, char cellsz) {
    list[CLST_MAX]=size;
    list[CLST_SZ]=cellsz;
}

void CListClear(char *list) {
    list[CLST_NUM]=0;
}

#endif
