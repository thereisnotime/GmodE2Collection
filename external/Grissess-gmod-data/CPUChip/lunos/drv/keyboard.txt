//LunOS -- Lunar Operating System
//driver -- Driver Framework
//keyboard -- Keyboard Driver

//This driver manages all keyboards attached to a LunOS system.

//#pragma set OutputDebugListing true
//#pragma set OutputBinaryListing true
//#pragma set OutputTokenListing true
//#pragma set OutputCodeTree true
//#pragma set OutputFinalListing true
#pragma set OutputResolveListing true
#pragma set NoUnreferencedLeaves false

//[DEFINE] LUNOS_DRV_KBD
#ifndef LUNOS_DRV_KBD
#define LUNOS_DRV_KBD

#include <lunos/driver.txt>
#include <lunos/list.txt>
#include <lunos/io.txt>
#include <lunos/error.txt>

#define KBD_BUFSZ 0
#define KBD_BUF_PTR 1
#define KBD_BUF_MAX 31
#define KBD_ASCII_LOW 32
#define KBD_ASCII_HIGH 127

#define KBD_SIZE 256

#define KDBNLM_LF 0
#define KBDNLM_CR 1
#define KBDNLM_CR_LF 2

//TODO
//char drvKbdNewlineMode=KBDNLM_LF;
//
//string drvKbdNlmLf, "\n";
//string drvKbdNlmCr, "\r";
//string drvKbdNlmCrLf, "\r\n";
//drvKbdNlmChar:
//    db drvKbdNlmLf;
//    db drvKbdNlmCr;
//    db drvKbdNlmCrLf;
    
char _DrvKbdList[DRV_LIST_SZ];

char DrvKbdNumKeyboards() {
    return ListSize(_DrvKbdList);
}

char *DrvKbdAddress(char kbdnum) {
    return ListElement(_drvKbdList, kbdnum);
}

char *DrvKbdRoot(char *kbdaddr) {
    return kbdaddr;
}

//Write the characters pending in the keyboard to the buffer, up to
//size. If size is exceeded, this won't be null-terminated; otherwise,
//it will be. Returns the number of characters read in.
char DrvKbdRetrieve(char *kbdaddr, char *buffer, char sz) {
    char *p;
    p=buffer;
    while((p-buffer)<sz) {
        if(kbdaddr[KBD_BUFSZ]==0) {
            if((p-buffer)<sz) {
                p[0]=0;
            }
            return p-buffer;
        }
        *p=kbdaddr[KBD_BUF_PTR];
        kbdaddr[KBD_BUFSZ]=1;
        p++;
    }
    return p-buffer;
}

char DrvKbdEntry(char op, char *devptr) {
    if(op==DRV_OP_CLEAR) {
        ListClear(_DrvKbdList);
    }
    if(op==DRV_OP_INIT) {
        if(!ListContains(_DrvKbdList, devptr)) {
            ListAppend(_DrvKbdList, devptr);
        }
        return KBD_SIZE;
    }
    if(op==DRV_OP_STOP) {
        ListRemove(_DrvKbdList, devptr);
    }
    if(op==DRV_OP_SCAN) {
        return 0;
    }
    return 0;
}

char DrvKbdControlEntry(char ioctl, char *buffer) {
    char *dev;
    char temp;
    if(ioctl==IOCTL_CAN_READ) {
        if(ListSize(buffer)<1) {
            return ENOMEM;
        }
        ListSet(buffer, 0, 1);
        return 0;
    } else if(ioctl==IOCTL_CAN_BLOCK||ioctl==IOCTL_CAN_SEEK||ioctl==IOCTL_CAN_WRITE) {
        if(ListSize(buffer)<1) {
            return ENOMEM;
        }
        ListSet(buffer, 0, 0);
        return 0;
    } else if(ioctl==IOCTL_READ_AVAIL) {
        if(ListSize(buffer)<1) {
            return ENOMEM;
        }
        dev=ListElement(buffer, 0);
        if(!dev) {
            return EBADVAL;
        }
        ListSet(buffer, 0, dev[KBD_BUFSZ]);
        return 0;
    }
    //Not implemented.
    return 0;
}

char DrvKbdIOEntry(char *dev, char op, char *buffer) {
    char temp;
    char count;
    char maxpos;
    char *p;
    if(op==IO_READ) {
        count=0;
        if(dev[KBD_BUFSZ]) {
            temp=ListAppend(buffer, dev[KBD_BUF_PTR]);
            dev[KBD_BUFSZ]=1;
            while(temp&&(dev[KBD_BUFSZ])) {
                temp=ListAppend(buffer, dev[KBD_BUF_PTR]);
                dev[KBD_BUFSZ]=1;
                count++;
            }
        }
        return count;
    }
    return 0;
}

//[INITFUNC] DrvKbdInit();
//[INITTIME] DRIVERS_BASIC 1
void DrvKbdInit() {
    ListInit(_DrvKbdList, DRV_LIST_SZ-LST_LIST);
    DrvSetDriverEntry(DRV_TYPE_KEYBOARD, DrvKbdEntry);
    DrvSetCountEntry(DRV_TYPE_KEYBOARD, DrvKbdNumKeyboards);
    DrvSetAddressEntry(DRV_TYPE_KEYBOARD, DrvKbdAddress);
    DrvSetRootEntry(DRV_TYPE_KEYBOARD, DrvKbdRoot);
    DrvSetIOEntry(DRV_TYPE_KEYBOARD, DrvKbdIOEntry);
    DrvSetControlEntry(DRV_TYPE_KEYBOARD, DrvKbdControlEntry);
}

#endif
