//LunOS -- Lunar Operating System
//driver -- Driver Framework
//extbus -- Extended Bus Driver

//This driver controls the extended buses attached to a LunOS system. It is responsible for
//scanning devices on an advanced bus, as well as initializing the appropriate drivers for
//each.

//#pragma set OutputDebugListing true
//#pragma set OutputBinaryListing true
//#pragma set OutputTokenListing true
//#pragma set OutputCodeTree true
//#pragma set OutputFinalListing true
#pragma set OutputResolveListing true
#pragma set NoUnreferencedLeaves false

//[DEFINE] LUNOS_DRV_EBUS
#ifndef LUNOS_DRV_EBUS
#define LUNOS_DRV_EBUS

#include <lunos/driver.txt>
#include <lunos/list.txt>
#include <lunos/io.txt>
#include <lunos/error.txt>

//Extended bus drivers have 8 memory slots, so this stays constant (for now).
//Nota bene: we don't do recursive scans on the bus, we do them in the kernel :D
#define DRV_EBUS_DEVICES 8
#define DRV_EBUS_HDR_SIZE 32

//Registers
#define REG_EBUS_CDATA_SZ 16
#define REG_EBUS_SCAN 17
#define REG_EBUS_RECURSE 20
#define REG_EBUS_DEVTYPE_PTR 32

//This is really stupid--the code of the ebus will, if the addresses are the same,
//prefer the first memory entry, which means if there's a zero-size entry (due to
//a disconnected input, unrecognized device, etc.) before a recognized, sized
//device at that address, *the empty slot gets preference*. To prevent that, this
//number is set to be the minimum span size.
#define DRV_EBUS_EPSILON 1
//Also, as a result, these spans can't overlap, even on their endpoints. To keep
//this from being a problem, we can increment the address by this all of the time.

char *_DrvEBusList[DRV_LIST_SZ];

char DrvEBusNumBusses() {
    return ListSize(_DrvEBusList);
}

char *DrvEBusAddress(char busnum) {
    return ListElement(_DrvEBusList, busnum);
}

char *DrvEBusRoot(char *busaddr) {
    return busaddr+busaddr[REG_EBUS_CDATA_SZ];
}
    
void DrvEBusSetInput(char *busaddr, char devnum, char start, char end) {
    busaddr[2*devnum]=start;
    busaddr[2*devnum+1]=end;
}

char DrvEBusGetInputStart(char *busaddr, char devnum) {
    return busaddr[2*devnum];
}

char DrvEBusGetInputEnd(char *busaddr, char devnum) {
    return busaddr[2*devnum+1];
}

char DrvEBusEntry(char op, char *devptr) {
    char curaddr;
    char i;
    char size;
    void *drvfunc;
    if(op==DRV_OP_CLEAR) {
        ListClear(_DrvEBusList);
    }
    if(op==DRV_OP_INIT) {
        if(!ListContains(_DrvEBusList, devptr)) {
            ListAppend(_DrvEBusList, devptr);
        }
        devptr[REG_EBUS_CDATA_SZ]=DRV_EBUS_HDR_SIZE+DRV_EBUS_DEVICES;
        devptr[REG_EBUS_RECURSE]=0;
        //We need to actuate our own scan routine to determine reservation size.
        return DrvEBusEntry(DRV_OP_SCAN, devptr)+devptr[REG_EBUS_CDATA_SZ];
    }
    if(op==DRV_OP_STOP) {
        ListRemove(_DrvEBusList, devptr);
    }
    if(op==DRV_OP_SCAN) {
        if(!ListContains(_DrvEBusList, devptr)) {
            return 0;
        }
        devptr[REG_EBUS_SCAN]=1; //Do the scan.
        curaddr=0;
        for(i=0; i<DRV_EBUS_DEVICES; i++) {
            size=0;
            if(devptr[REG_EBUS_DEVTYPE_PTR+i]) {
                drvfunc=DrvGetDriver(devptr[REG_EBUS_DEVTYPE_PTR+i]);
                if(drvfunc) {
                    size=drvfunc(DRV_OP_INIT, devptr+devptr[REG_EBUS_CDATA_SZ]+curaddr);
                }
            }
            if(size<=0) {
                size=0;
            }
            DrvEBusSetInput(devptr, i, curaddr, curaddr+size);
            curaddr+=size+DRV_EBUS_EPSILON;
        }
        return curaddr;
    }
    //If we got here, the return isn't important.
    return 0;
}

char DrvEBusControlEntry(char ioctl, char *buffer) {
    //There is *no* IO support as of yet.
    if(ListSize(buffer)>0) {
        ListSet(buffer, 0, 0);
        return 0;
    }
    return ENOMEM;
}

//[INITFUNC] DrvEBusInit();
//[INITTIME] DRIVERS_BASIC 0
void DrvEBusInit() {
    ListInit(_DrvEBusList, DRV_LIST_SZ-LST_LIST);
    DrvSetDriverEntry(DRV_TYPE_EBUS, DrvEBusEntry);
    DrvSetCountEntry(DRV_TYPE_EBUS, DrvEBusNumBusses);
    DrvSetAddressEntry(DRV_TYPE_EBUS, DrvEBusAddress);
    DrvSetRootEntry(DRV_TYPE_EBUS, DrvEBusRoot);
    DrvSetIOEntry(DRV_TYPE_EBUS, NULL);
    DrvSetControlEntry(DRV_TYPE_EBUS, DrvEBusControlEntry);
}
    

#endif
