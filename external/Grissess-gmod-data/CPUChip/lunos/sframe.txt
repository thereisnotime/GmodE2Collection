//LunOS -- Lunar Operating System
//sframe -- Stack Framing

//This module provides support to the scheduler, allowing access to registers saved
//during preemption on the stack. Note that the current ZVM does not save any R*
//registers this way; this must be done manually (with the magic functions below).

#ifndef LUNOS_SFRAME
#define LUNOS_SFRAME

#include <lunos/intr.txt>

//Regardless of which interrupt method is used, the last two bytes on the stack are
//the CS:IP pair to return to. Both EXTRET and IRET eventually behave as RETF, though
//EXTRET does some additional work.

//HOWEVER, after observing the ZVM code (and not saying BP is braindead or anything,
//it's just a necessary evil for sharing the interrupt mechanism), EXTRET ignores
//these two bytes for the CS:IP pair that is redundantly in the register frame. Still,
//these two bytes must be present for the frame to be valid.

#define INT_CS 1
#define INT_IP 2

//This is the regular structure of offsets from ESP for an EXTRET frame.

//NB: Again, redundant registers--although SS and ESP are in this frame,
//their values are entirely ignored, as it would break the code that reads
//the frame back into the registers. AFAICT, the values you put in here do
//nothing, but this may not be the case forever, so they are "reserved."

#define XINT_IP 3
#define XINT_CMPR 4
#define XINT_EAX 5
#define XINT_EBX 6
#define XINT_ECX 7
#define XINT_EDX 8
#define XINT_ESP 9
#define XINT_ESI 10
#define XINT_EDI 11
#define XINT_CS 12
#define XINT_SS 13
#define XINT_DS 14
#define XINT_FS 15
#define XINT_GS 16
#define XINT_ES 17
#define XINT_KS 18
#define XINT_LS 19

//Because the EXTINT mechanism does not save any R* registers, we have to do that manually.
//To avoid copypasta, I've put the code that will save their state on the current stack;
//HOWEVER, since this compiler does not do macros or anything but cdecl, I have to pop off
//the return address into a safe place (id est, global variables). This little hack means
//that THIS FUNCTION IS NOT RE-ENTRANT, and MUST NOT BE INTERRUPTED.

char _SFrameRetIP;

_SFramePushAllR:
    //This code cannot be interrupted after the next instruction.
    BeginAtomicSection();
    //First, get the return address off the stack.
    POP _SFrameRetIP;
    //Assuming the Z-CDECL convention, we've entered a near call in the normal way with ECX
    //clobbered by the number of arguments we've taken, and those pushed on the stack as well.
    //We should NEVER get called with arguments, but it never hurts to be safe.
    CMP ECX,ECX;
    JZ __SFramePushNoArgs;
    __SFramePushHasArg:
    POP EAX; //Who cares about EAX anyways? The one we care about is in the frame.
    LOOP __SFramePushHasArg;
    __SFramePushNoArgs:
    //We should be back to ESP being where it was before this retarded function was called.
    //Good. Let's do our job and bail out.
    MOV ECX, REG_R_SZ-1;
    __SFramePushLoop:
    MOV EBX, REG_R0;
    ADD EBX, ECX;
    CPUGET EAX, EBX;
    PUSH EAX;
    LOOP __SFramePushLoop;
    //End the critical section, piggybacking the RET from here into our caller :D
    PUSH _SFrameRetIP;
    JMP EndAtomicSection;
    
//The same thing with the opposite effect. I'll be a little more terse, now.
_SFramePopAllR:
    BeginAtomicSection();
    POP _SFrameRetIP;
    CMP ECX,ECX;
    JZ __SFramePopNoArgs;
    __SFramePopHasArg:
    POP EAX;
    LOOP __SFramePopHasArg;
    __SFramePopNoArgs:
    MOV ECX, REG_R0+REG_R_SZ;
    MOV EBX, REG_R0;
    __SFramePopLoop:
    POP EAX;
    CPUSET EBX, EAX;
    INC EBX;
    CMP EBX, ECX;
    JL __SFramePopLoop;
    PUSH _SFrameRetIP;
    JMP EndAtomicSection;

#endif
