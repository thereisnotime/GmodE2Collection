//LunOS -- Lunar Operating System
//list -- Lists

//Lists are very basic data structures with fixed size, fast appending, linear element testing,
//and linear removal. They are used in places where such basic structures are adequate, because
//they do not require memory management.

//Lists cannot store full cells, but they can store pointers. See cell lists for more information
//on storing structured cells of fixed size.

//#pragma set OutputDebugListing true
//#pragma set OutputBinaryListing true
//#pragma set OutputTokenListing true
//#pragma set OutputCodeTree true
//#pragma set OutputFinalListing true
#pragma set OutputResolveListing true
#pragma set NoUnreferencedLeaves false

#ifndef LUNOS_LIST
#define LUNOS_LIST

#define LST_NUM 0
#define LST_MAX 1
#define LST_LIST 2

char ListContains(char *list, char value) {
    char i;
    for(i=LST_LIST; i<list[LST_NUM]+LST_LIST; i++) {
        if(list[i]==value) {
            return 1;
        }
    }
    return 0;
}

char ListIndex(char *list, char value) {
    char i;
    for(i=LST_LIST; i<list[LST_NUM]+LST_LIST; i++) {
        if(list[i]==value) {
            return i-LST_LIST;
        }
    }
    return -1;
}

char ListAppend(char *list, char value) {
    if(list[LST_NUM]<list[LST_MAX]) {
        list[LST_LIST+list[LST_NUM]]=value;
        list[LST_NUM]++;
        return 1;
    }
    return 0;
}

char ListAppendBuffer(char *list, char *buffer, char items) {
    char lnum;
    char lmax;
    char orignum;
    char *p;
    lnum=list[LST_NUM];
    orignum=lnum;
    lmax=list[LST_MAX];
    p=buffer;
    while((lnum<lmax)&&((p-buffer)<items)) {
        list[LST_LIST+lnum]=*p;
        lnum++;
        p++;
    }
    list[LST_NUM]=lnum;
    return lnum-orignum;
}

char ListExtend(char *list, char *mem, char sz) {
    char lnum;
    char lmax;
    char lorig;
    lnum=list[LST_NUM];
    lorig=lnum;
    lmax=list[LST_MAX];
    while((lnum<lmax)&(sz>0)) {
        list[LST_LIST+lnum]=mem[lnum-lorig];
        lnum++;
        sz--;
    }
    return lnum-lorig;
}

char ListRemove(char *list, char value) {
    char i;
    char j;
    for(i=LST_LIST; i<list[LST_NUM]+LST_LIST; i++) {
        if(list[i]==value) {
            for(j=i; j<list[LST_NUM]+LST_LIST-1; j++) {
                list[j]=list[j+1];
            }
            list[LST_NUM]--;
            return 1;
        }
    }
    return 0;
}

char ListShift(char *list, char amount) {
    char i;
    if(amount>list[LST_NUM]) {
        amount=list[LST_NUM];
    }
    if(amount<=0) { //Why are you even shifting? O_O
        return list[LST_NUM];
    }
    for(i=amount; i<list[LST_NUM]; i++) {
        list[LST_LIST+(i-amount)]=list[LST_LIST+i];
    }
    list[LST_NUM]-=amount;
    return list[LST_NUM];
}

//These functions will remain in the public API for safe use elsewhere.
//(In here, the code is optimized a bit more.)
char ListElement(char *list, char index) {
    return list[LST_LIST+index];
}

void ListSet(char *list, char index, char value) {
    list[LST_LIST+index]=value;
}

char *ListAddress(char *list, char index) {
    return list+LST_LIST+index;
}

char ListSize(char *list) {
    return list[LST_NUM];
}

char ListAvailable(char *list) {
    return list[LST_MAX]-list[LST_NUM];
}

//You MUST call this to initialize the list. Otherwise, LST_MAX will be
//zero, and you won't be able to append anything. (Or, worse, LST_MAX
//could point to random data, and your list could corrupt memory.)
//The bytewise size of the list will be LST_LIST+size.
void ListInit(char *list, char size) {
    list[LST_MAX]=size;
}

void ListClear(char *list) {
    list[LST_NUM]=0;
}

#endif
