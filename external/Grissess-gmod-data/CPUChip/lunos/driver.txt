//LunOS -- Lunar Operating System
//driver -- Driver Framework

//Defines the primary framework for drivers. It is very, very simple because most of the work
//is segmented off in the branch that does the scanning of devices on the extended address bus.
//You'll probably want to include that as well.

//#pragma set OutputDebugListing true
//#pragma set OutputBinaryListing true
//#pragma set OutputTokenListing true
//#pragma set OutputCodeTree true
//#pragma set OutputFinalListing true
#pragma set OutputResolveListing true
#pragma set NoUnreferencedLeaves false

#ifndef LUNOS_DRV
#define LUNOS_DRV

//Various maxima
//Number of device types, size of the _DrvDeviceName array
#define DRV_DEVICE_TYPES 21
//Number of entries in a driver list, using the lunos/list.txt module.
//Note that this results in a capacity for this-LST_LIST devices.
#define DRV_LIST_SZ 10

//Call type parameters for driver entries.
//Clear all state information. Second parameter is zero. Return is ignored.
#define DRV_OP_CLEAR 0
//Introduce a new device at the location passed in the second parameter. Reserves as much space as returned.
#define DRV_OP_INIT 1
//Clear the state information from the device at the indicated address in the second parameter. Return is ignored.
#define DRV_OP_STOP 2
//Scan for any devices attached to the device at the address indicated by the second parameter. Reserve as much space as returned.
#define DRV_OP_SCAN 3

#define CPUID_VERSION 0
#define CPUID_RAM 1
#define CPUID_TYPE 2
#define CPUID_ROM 3

//I am a copypasta whore that deserves to die for not reinventing the wheel.

//Device name/string data
string drvDeviceString0,"None";
#define DRV_TYPE_NONE 0
string drvDeviceString1,"Unknown";
#define DRV_TYPE_UNKNOWN 1
string drvDeviceString2,"Extended bus";
#define DRV_TYPE_EBUS 2
string drvDeviceString3,"Address bus";
#define DRV_TYPE_BUS 3
string drvDeviceString4,"Zyelios CPU";
#define DRV_TYPE_CPU 4
string drvDeviceString5,"Zyelios GPU";
#define DRV_TYPE_GPU 5
string drvDeviceString6,"Zyelios SPU";
#define DRV_TYPE_SPU 6
string drvDeviceString7,"Flash EEPROM";
#define DRV_TYPE_FLASH 7
string drvDeviceString8,"ROM";
#define DRV_TYPE_ROM 8
string drvDeviceString9,"Data bus";
#define DRV_TYPE_DBUS 9
string drvDeviceString10,"CD Ray";
#define DRV_TYPE_CD 10
string drvDeviceString11,"Console screen";
#define DRV_TYPE_CONSOLE 11
string drvDeviceString12,"Digital screen";
#define DRV_TYPE_DSCREEN 12
string drvDeviceString13,"Data plug";
#define DRV_TYPE_DPLUG 13
string drvDeviceString14,"Data socket";
#define DRV_TYPE_DSOCKET 14
string drvDeviceString15,"Keyboard";
#define DRV_TYPE_KEYBOARD 15
string drvDeviceString16,"Oscilloscope";
#define DRV_TYPE_OSCIL 16
string drvDeviceString17,"Sound emitter";
#define DRV_TYPE_SOUND 17
string drvDeviceString18,"Constant value";
#define DRV_TYPE_CONSTANT 18
string drvDeviceString19,"Data port";
#define DRV_TYPE_DPORT 19
string drvDeviceString20,"RAM";
#define DRV_TYPE_RAM 20
_DrvDeviceName: 
  db drvDeviceString0, drvDeviceString1, drvDeviceString2;
  db drvDeviceString3, drvDeviceString4, drvDeviceString5;
  db drvDeviceString6, drvDeviceString7, drvDeviceString8;
  db drvDeviceString9, drvDeviceString10,drvDeviceString11;
  db drvDeviceString12,drvDeviceString13,drvDeviceString14;
  db drvDeviceString15,drvDeviceString16,drvDeviceString17;
  db drvDeviceString18,drvDeviceString19,drvDeviceString20;

void *_DrvDriverEntry[DRV_DEVICE_TYPES];
void *_DrvCountEntry[DRV_DEVICE_TYPES];
void *_DrvAddressEntry[DRV_DEVICE_TYPES];
void *_DrvRootEntry[DRV_DEVICE_TYPES];
void *_DrvIOEntry[DRV_DEVICE_TYPES];
void *_DrvControlEntry[DRV_DEVICE_TYPES];
char *_DrvBusRoot;

void DrvSetDriverEntry(char devtype, void *entry) {
    _DrvDriverEntry[devtype]=entry;
}

void *DrvGetDriver(char devtype) {
    return _DrvDriverEntry[devtype];
}

void DrvSetCountEntry(char devtype, void *entry) {
    _DrvCountEntry[devtype]=entry;
}

void *DrvGetCountEntry(char devtype) {
    return _DrvAddressEntry[devtype];
}

void DrvSetAddressEntry(char devtype, void *entry) {
    _DrvAddressEntry[devtype]=entry;
}

void *DrvGetAddressEntry(char devtype) {
    return _DrvRootEntry[devtype];
}

void DrvSetRootEntry(char devtype, void *entry) {
    _DrvRootEntry[devtype]=entry;
}

void *DrvGetRootEntry(char devtype) {
    return _DrvCountEntry[devtype];
}

void DrvSetIOEntry(char devtype, void *entry) {
    _DrvIOEntry[devtype]=entry;
}

void *DrvGetIOEntry(char devtype) {
    return _DrvIOEntry[devtype];
}

void DrvSetControlEntry(char devtype, void *entry) {
    _DrvControlEntry[devtype]=entry;
}

void *DrvGetControlEntry(char devtype) {
    return _DrvControlEntry[devtype];
}

char *DrvGetName(char devtype) {
    return _DrvDeviceName[devtype];
}

void DrvSetRoot(char *root) {
    _DrvBusRoot=root;
}

char *DrvGetRoot() {
    return _DrvBusRoot;
}

char *DrvGetExternalRoot() {
    cpuid CPUID_RAM;
    return EAX;
}

void DrvClear() {
    char i;
    void *func;
    for(i=0; i<DRV_DEVICE_TYPES; i++) {
        func=DrvGetDriver(i);
        if(func) {
            func(DRV_OP_CLEAR, 0);
        }
    }
}

#endif
