//LunOS -- Lunar Operating System
//test -- Testing
//drv_basic -- Basic Drivers

//Tests basic driver performance. Use this to ensure that basic driver things
//(scanning, device location, etc.) are working.

//Errors:
//64-Driver library did not return the appropriate entry.
//65-No console screen detected.
//66-No keyboards detected.
//32-Success.

//#pragma set OutputDebugListing true
//#pragma set OutputBinaryListing true
//#pragma set OutputTokenListing true
//#pragma set OutputCodeTree true
//#pragma set OutputFinalListing true
#pragma set OutputResolveListing true
#pragma set NoUnreferencedLeaves false

call main;
int 1;

#define DEBUG_CNS

#include <lunos/driver.txt>
#include <lunos/drv/extbus.txt>
#include <lunos/drv/console.txt>
#include <lunos/drv/keyboard.txt>

#define KBDBUF_SZ 16
char kbdbuffer[KBDBUF_SZ];

void main() {
    void *de;
    char *cns;
    char *kbd;
    char cnsnum;
    char numconsoles;
    char kbdnum;
    char numkeyboards;
    char amt;
    DrvEBusInit();
    DrvCnsInit();
    DrvKbdInit();
    DrvSetRoot(DrvGetExternalRoot());
    //Assume we have an extended bus connected
    de=DrvGetDriver(DRV_TYPE_EBUS);
    if(de!=DrvEBusEntry) {
        int 64;
    }
    de(DRV_OP_INIT, DrvGetRoot());
    if(!DrvCnsNumConsoles()) {
        int 65;
    }
    numconsoles=DrvCnsNumConsoles();
    for(cnsnum=0; cnsnum<numconsoles; cnsnum++) {
        cns=DrvCnsAddress(cnsnum);
        DrvCnsClear(cns);
        DrvCnsSetCursorVisible(cns, 1);
        DrvCnsWrite(cns, "Screen", CA_FG_WHITE);
    }
    if(!DrvKbdNumKeyboards()) {
        int 66;
    }
    numkeyboards=DrvKbdNumKeyboards();
    while(1) {
        for(kbdnum=0; kbdnum<numkeyboards; kbdnum++) {
            kbd=DrvKbdAddress(kbdnum);
            amt=DrvKbdRetrieve(kbd, kbdbuffer, KBDBUF_SZ-1);
            if(amt) {
                for(cnsnum=0; cnsnum<numconsoles; cnsnum++) {
                    cns=DrvCnsAddress(cnsnum);
                    DrvCnsWrite(cns, kbdbuffer, CA_FG_WHITE);
                }
            }
        }
    }
    int 32;
}
