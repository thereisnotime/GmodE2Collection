//LunOS -- Lunar Operating System
//lufs -- Virtual File System

//Defines the Lunar File System implementation.

//This has a layout much like a driver, for ease of use, but it is meant to be
//device-agnostic. A real driver, e.g., would keep track of devices used.

//LuFS assumes a contiguous address space; logically, it breaks these into sectors.
//A sector of size N is laid out as follows:
//Byte 0: Sector type (a SC constant)
//Byte 1: Next sector
//Byte 2: Previous sector
//Byte 3: Reserved
//Byte 4..(N-1): Sector data

//Sectors are laid out as a virtual, discontiguous packet stream over the contiguous
//address space; this allows various sector-consuming entities, such as files, FATs,
//and meta streams, to expand or collapse as needed.

//File Allocation Tables (FATs) are overlays on sectors. Conceptually, they represent
//directory listings. The layout is dependent on the first byte, but may, of course,
//contain more. Types and layouts are mapped as follows:
//[FAT_STOP] - Represents the end of the FAT.
//[FAT_NOP] - Represents a 1-byte non-entry, used to write over deleted entries.
//[FAT_FILE] <entity descriptor> - Represents a file
//[FAT_DIR] <entity descriptor> - Represents a directory

//The layout of the entity descriptor is as follows:
//Byte 0: For directories, the first sector of the FAT. For files, the first sector of the file stream.
//Pascal String: Local name of the entity.
//Zero or more non-zero metadata stream designators, followed by the sector number of a metadata sector.
//A zero metadata stream designator, marking the end of all metadata streams.

//Metadata streams are implementation defined. Since each stream consumes sectors, it is
//recommended that a metadata-using application compress as much information as possible
//into a single stream.

//The first sector of any volume is an informational sector containing the following:
//Byte 0: The magic number 0x4C554653 -- ASCII for "LUFS". This may be one byte or four bytes on
//certain machines; if its value is 0x4C, assume the latter, and adjust the following offsets
//accordingly.
//Byte 1/5: The current version; a driver must fault if it cannot tolerate this version.
//Byte 2/6: The sector size. Must be at least 8, but should be higher for all practical intents.
//Byte 3/7: Sector number of the root FAT--the FAT sector that indirectly holds all other files.
//Byte 4/8: Length of the volume name.
//Byte 5/9..N: Volume name
//Byte N+1..M: An optional set of <meta pairs>

//#pragma set OutputDebugListing true
//#pragma set OutputBinaryListing true
//#pragma set OutputTokenListing true
//#pragma set OutputCodeTree true
//#pragma set OutputFinalListing true
//#pragma set OutputResolveListing true
#pragma set NoUnreferencedLeaves false

#ifndef LUNOS_LUFS
#define LUNOS_LUFS

#include <lunos/error.txt>
#include <lunos/list.txt>

#define SC_UNUSED 0
#define SC_STREAM 1
#define SC_FAT 2
#define SC_FS 3

#define FAT_STOP 0
#define FAT_NOP 1
#define FAT_FILE 2
#define FAT_DIR 3

#define META_END 0

#define SC_M_TYPE 0
#define SC_M_NEXT 1
#define SC_M_PREV 2
#define SC_M__RES 3
#define SC_M_DATA 4

#define ST_M_MAGIC 0
#define OFS_LRG_MAGIC 3
#define ST_M_VERSION 1
#define ST_M_ROOT 2
#define ST_M_NAMELEN 3
#define ST_M_NAME 4

#define ED_M_SEC 0
#define ED_M_NAMELEN 1
#define ED_M_NAME 2

#define LUFS_MAGIC 0x4C554653
#define LUFS_MAGIC_0 0x4C
#define LUFS_MAGIC_1 0x55
#define LUFS_MAGIC_2 0x46
#define LUFS_MAGIC_3 0x53
#define LUFS_VERSION 1

//-----Section 1: Block devices and stream overlays.-----

//int LuFSHeaderOffset(Device *dev)
//Returns 0 for headers that are 1 byte, OFS_LRG_MAGIC for headers that are
//multibyte, and -1 if no header is present.
char LuFSHeaderOffset(char *dev) {
    if(dev[ST_M_MAGIC]==LUFS_MAGIC) {
        return 0;
    } else if(dev[ST_M_MAGIC+0]==LUFS_MAGIC_0 && dev[ST_M_MAGIC+1]==LUFS_MAGIC_1 && dev[ST_M_MAGIC+2]==LUFS_MAGIC_2 && dev[ST_M_MAGIC+3]==LUFS_MAGIC_3) {
        return OFS_LRG_MAGIC;
    }
    return -1;
}

//int LuFSCheckHeader(Device *dev)
//Returns an error constant--ENONE if a successful partition was found,
//EBADVAL if the partition is a newer version (or similar corruption issues),
//or ENOTFOUND if it's unlikely that it's a partition.
char LuFSCheckHeader(char *dev) {
    char off;
    off=LuFSHeaderOffset(dev);
    if(off==-1) {
        return ENOTFOUND;
    }
    if(dev[ST_M_VERSION+off]>LUFS_VERSION) {
        return EBADVAL;
    }
    return ENONE;
}

//int LuFSGetName(Device *dev, List *buf)
//Writes (extends) the buffer (list) with the name of the volume, not
//null-terminated. Buffers that are too small will receive a
//truncated name. If the device doesn't (appear to) hold a file system,
//returns ENOTFOUND.
char LuFSGetName(char *dev, char *buf) {
    char off;
    off=LuFSHeaderOffset(dev);
    if(off==-1) {
        return ENOTFOUND;
    }
    ListExtend(buf, dev+off+ST_M_NAME, dev[off+ST_M_NAMELEN]);
    return ENONE;
}


