@name repeaterlib
@persist RepeaterLib_Repeaters:table
@model models/bull/gates/microcontroller1.mdl

#[                                         ]#
##    E2 Library: RepeaterLib              ##
##                                         ##
##    Implements easy repeating timers.    ##
#[                                         ]#

if(first()){
    
    ###############
    ## 
    #   repeater( ID:string, Time )
    #     Creates a new repeating timer and starts it
    #
    function repeater(ID:string,Time){
        RepeaterLib_Repeaters[ID,number] = Time
        timer("RepeaterLib_"+ID,Time)
    }

    ###############
    ## 
    #   repeaterClk( ID:string )
    #     Use this for repeaters where you'd normally use clk() for timers
    #
    function number repeaterClk(ID:string){
        return clk("RepeaterLib_"+ID) 
    }
    
    ###############
    ## 
    #   repeaterRemove( ID:string )
    #     Removes a repeating timer
    #
    function repeaterRemove(ID:string){
        RepeaterLib_Repeaters:remove(ID)
    }
    
    ###############
    ## 
    #   repeaterStop( ID:string )
    #     Stops a repeating timer
    #
    function repeaterStop(ID:string){
        #ifdef stoptimer(string)
            stoptimer("RepeaterLib_"+ID)   
        #else
            timer("RepeaterLib_"+ID,inf())
        #endif
    }
    
    ###############
    ## 
    #   repeaterStart( ID:string )
    #     Restarts a repeating timer
    #
    function repeaterStart(ID:string){
        timer("RepeaterLib_"+ID,RepeaterLib_Repeaters[ID,number])   
    }
    
    if(entity():model() == "models/bull/gates/microcontroller1.mdl"){
        selfDestruct()
        error("This is a library; #include it in something.")
    }
    
}

Keys = RepeaterLib_Repeaters:keys()
foreach(ID,Key:string=Keys){
    local Time = RepeaterLib_Repeaters[Key,number]
    if(clk("RepeaterLib_"+Key)){
        timer("RepeaterLib_"+Key,Time)        
    } 
}


