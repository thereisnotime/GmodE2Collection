@name Hex Elytra
@inputs 
@outputs 
@persist Jumps CollisionVel:vector Deployed Gibs:entity SHOW_WINGS
@trigger 

if(first()){
    
    ###########################
    #                         #
    #      E2 Hex Elytra      #
    #      by: Fasteroid      #
    #                         #
       SHOW_WINGS    =    1
    #                         #
    #  Remove this to become  #
    #   inf() gay instantly   #
    #                         #
    ###########################


    owner():soundPlay(1,0,"ambient/wind/wind1.wav")
    soundVolume(1,0)
    soundPitch(1,120)
    
    # we must now sacrifice a hologram to the holoParentAttachment blood gods
    holoCreate(0)
    holoParentAttachment(0,owner(),"chest")
    holoVisible(0,players(),0)
    # I will probably open an issue about this later
    
    runOnTick(1)
    
    function elytraWinglet(ID,Origin:vector,Polarity){
        O = Origin
        Child = ID
        holoCreate(ID,O)
        holoScale(ID,vec(0.5,0.5,0.15))
        holoModel(ID,"hq_cylinder")
        holoMaterial(ID,"lights/white")
        holoColor(ID,vec(255))
        Child++
        holoCreate(Child,O)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1,1,0.1))
        holoParent(Child,ID)
        Child++
        holoCreate(Child,O+vec(1,Polarity,1)*vec(sin(30),cos(30),0)*10.4)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1,1,0.1))
        holoParent(Child,ID)
        Child++
        holoCreate(Child,O+vec(1,Polarity,1)*vec(sin(30)*(-1/2),cos(30)*(1/2),0)*10.4)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1/2,1/2,0.05))
        holoParent(Child,ID)
        Child++
        holoCreate(Child,O+vec(1,Polarity,1)*vec(0,cos(30),0)*10.4)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1/2,1/2,0.05))
        holoParent(Child,ID)
        Child++
        holoCreate(Child,O+vec(1,Polarity,1)*vec(sin(30)*2,0,0)*10.4)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1,1,0.1))
        holoParent(Child,ID)
        Child++
        holoCreate(Child,O+vec(1,Polarity,1)*vec(sin(30)*3,cos(30),0)*10.4)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1,1,0.1))
        holoParent(Child,ID)
        Child++
        holoCreate(Child,O+vec(1,Polarity,1)*vec(sin(30)*4,0,0)*10.4)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1,1,0.1))
        holoParent(Child,ID)
        Child++
        holoCreate(Child,O+vec(1,Polarity,1)*vec(sin(30)*6,0,0)*10.4)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1,1,0.1))
        holoParent(Child,ID)
        Child++
        holoCreate(Child,O+vec(1,Polarity,1)*vec(sin(30)*(9/2),cos(30)*(1/2),0)*10.4)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1/2,1/2,0.05))
        holoParent(Child,ID)
        Child++
        holoCreate(Child,O+vec(1,Polarity,1)*vec(sin(30)*(21/3),0,0)*10.4)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1/2,1/2,0.05))
        holoParent(Child,ID)
        Child++
        holoCreate(Child,O+vec(1,Polarity,1)*vec(sin(30)*(11/2),cos(30)*(1/2),0)*10.4)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1/2,1/2,0.05))
        holoParent(Child,ID)
        Child++
        holoCreate(Child,O+vec(1,Polarity,1)*vec(sin(30)*(12/3),cos(30)*(1),0)*10.4)
        holoModel(Child,"hexagon")
        holoScale(Child,vec(1/2,1/2,0.05))
        holoParent(Child,ID)
        for(N=ID+1,Child){
            holoColor(N,vec(randint(100,120)))
        }
        for(N=ID,Child){
            holoVisible(N,owner(),SHOW_WINGS)
        }
    }
    
    
    elytraWinglet(1,entity():pos(),1)
    elytraWinglet(14,entity():pos(),-1)
    
    AttachPos = owner():attachmentPos("chest")
    AttachAng = owner():attachmentAng("chest")
    
    holoPos(1,AttachPos + AttachAng:forward()*-8 + AttachAng:right()*5 )
    holoAng(1,AttachAng)
    
    holoPos(14,AttachPos + AttachAng:forward()*-8 + AttachAng:right()*-5 )
    holoAng(14,AttachAng)
    
    holoParentAttachment(14,owner(),"chest")
    holoParentAttachment(1,owner(),"chest")
    
    function vector vector:pitch(N){
        Y=ang(0,This:toAngle():yaw(),0)
        return This:rotate(-Y):rotate(ang(N,0,0)):rotate(Y)
    }
    
}



### 
##   Deployment Detection
#
    Space = owner():keyJump()
    
    if( owner():isOnGround() | owner():inNoclip() ){
        if(Jumps > 0){
            owner():setModelAngle(ang(0))     
        }
        Jumps = 0
        soundVolume(1,0)
    }
    
    if( ( changed(Space)&Space | owner():vel():length() > 2000 ) & Jumps<2 & owner():vel():dot(owner():eye()) > 0.7 ){
        Jumps++
    }
# 
##   Deployment Detection
###




if( Jumps==2 ){

    ### 
    ##   Tweaked Elytra Source Code 
    #
        ANG = owner():eyeAngles()
        ANG = ANG + ang(-5*(1-ANG[1]/89),90,0)
        VEL = owner():vel()*vec(0.02,0.02,0.1)
        
        FORCE = vec()
    
    		  Yawcos = cos(-ANG:yaw())
    		  Yawsin = sin(-ANG:yaw())
    		  Pitchcos = cos(ANG:pitch())
    		  Pitchsin = sin(ANG:pitch())
    		
    	 	 LookX = Yawsin * -Pitchcos
    	 	 LookY = -Pitchsin
    	 	 LookZ = Yawcos * -Pitchcos
    		
    		  Hvel = sqrt(VEL:x()^2 + VEL:y()^2)
    		  Hlook = Pitchcos
    		  Sqrpitchcos = Pitchcos^2
    		
    		  # code is close to the code found in net.minecraft.entity.EntityLivingBase.moveEntityWithHeading(float, float) or rq.g(float, float) in obfuscated 15w41b
    		  FORCE:setZ(-10 + Sqrpitchcos * 0.1)
    		
    		  if (VEL:z()< 0 & Hlook > 0){
            Yacc = VEL:z() * -0.01 * Sqrpitchcos
            FORCE = FORCE + vec(LookX * Yacc / Hlook,LookZ * Yacc / Hlook,Yacc)
        }
    		  if (ANG:pitch() < 0){
            Yacc = Hvel * -Pitchsin * 0.005
            FORCE = FORCE + vec(-LookX * Yacc * 1.5 / Hlook,-LookZ * Yacc * 1.5 / Hlook,Yacc*6 )
        }
    		  if (Hlook > 0){
            FORCE = FORCE + vec(LookX / Hlook * Hvel - VEL:x(),LookZ / Hlook * Hvel - VEL:y(),0)*vec(0.6,0.6,0.3)
        }
    		  FORCE[3] = min(FORCE[3],15) - max(VEL[3],0) * 0.006
        owner():plyApplyForce(FORCE*35 - VEL*vec(0.1,0.1,0)) # apply forces
    #
    ##   Tweaked Elytra Source Code 
    ###
    
    
    soundVolume(1,owner():vel():length()/8000)
    
    Deployed = clamp(Deployed+0.05,0,1)
    
    owner():setModelAngle( owner():vel():toAngle():setYaw(0) + ang(40,0,0) )  # apply visual angles to look epic in flight
    
    
    ###
    ##   Collision Damage
    #
    Eye = owner():eyeTrace()
    if( (owner():vel():length()-CollisionVel:length()) < -1000 & !first() & Eye:distance()<200 ){

        owner():soundPlay(2,1,"player/pl_fallpain"+(randint(1,0)*2+1)+".wav")
        #owner():soundPlay(3,1,"physics/body/body_medium_impact_hard"+randint(1,6)+".wav")     
        #owner():streamStart(1,"https://www.myinstants.com/media/sounds/classic_hurt.mp3",1)    
        Gibs = propSpawn("models/props_combine/breenbust.mdl",owner():pos()-CollisionVel:normalized()*50,0)
        Gibs:applyForce(CollisionVel*10)
        
    }
    #
    ##   Collision Damage
    ###
    
}
else{
    Deployed = clamp(Deployed-0.1,0,1)
}
    CollisionVel = owner():vel()
holoAng(1,ang( 90+Deployed*60,owner():angles():yaw()+90,-90 ))
holoAng(14,ang( 90-Deployed*60,owner():angles():yaw()+90,-90 ))


###
##   Break Concrete Gibs
#
if(Gibs){
    Gibs["age",number] = Gibs["age",number] + 1
    if(Gibs["age",number] > 4){
        Gibs["age",number] = 0
        Gibs:propBreak()
    }
    
}
#
##   Break Concrete Gibs
###

