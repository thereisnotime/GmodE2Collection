@name hologramanticringelib
@model models/bull/gates/microcontroller1.mdl

#[                                                     ]#
##    E2 Library: hologramAntiCringeLib                ##
##                                                     ##
##    Take back control of your holoModelAny holos     ##
##    with weird and nonsensical coordinate centers!   ##
##                                                     ##
##    WARNING:                                         ##
##    Extended holograms will break if moved without   ##
##    the library's knowledge!  Don't parent them!     ##
#[                                                     ]#

if( first() ){
    
    ###############
    ## 
    #   antiCringeExtend( HoloID ) OR <BetterHolo>:antiCringeExtend( )
    #     Extends the provided hologram to work with the anticringe functions.
    #     Call one of these on your hologram BEFORE you use the other functions in this library.
    #   
    function number:antiCringeExtend(){
        local Ent = holoEntity(This)
        Ent["ang",angle] = Ent:angles()
        Ent["pos",vector] = Ent:pos()        
        Ent["scl",vector] = holoScale(This)
        Ent["c",vector] = -Ent:boxCenter()        
        Ent["o",angle] = ang(0)
        Ent["model_scl",vector] = holoScaleUnits(This)
    }
    function antiCringeExtend(This){
        This:antiCringeExtend()
    }    
    
    ###############
    ## 
    #   holoSetCenter( Id, Center:vector )
    #     Use this to set the "true center" of an antiCringeExtended hologram
    #     NOTE: Center is local to the hologram, and not to the world
    #      
    function holoSetCenter( Id, Center:vector ){
        local Ent = holoEntity(Id)
        Ent["c",vector] = -Center        
    }
    
    ###############
    ## 
    #   holoOrient( Id, Default:angle )
    #     Use this to set the "default angles" of an antiCringeExtended hologram
    #     NOTE: Center is local to the hologram, and not to the world 
    #      
    function holoOrient( Id, Default:angle ){
        local Ent = holoEntity(Id)
        Ent["o",angle] = Default
    }
    
    ###############
    ## 
    #   holoAngExt( Id, A:angle )
    #     Use this where you would normally use holoAng on a normal hologram.
    #   
    function holoAngExt( Id, A:angle ){
        local Ent = holoEntity(Id)
        Ent["ang",angle] = toWorldAng(vec(),Ent["o",angle],vec(),A)
        holoAng(Id, Ent["ang",angle])
        holoPos(Id, Ent["pos",vector] + (Ent["c",vector]*Ent["scl",vector]):rotate(Ent["ang",angle]) )
    }
    
    ###############
    ## 
    #   holoPosExt( Id, A:vector )
    #     Use this where you would normally use holoPos on a normal hologram.
    #  
    function holoPosExt( Id, P:vector ){
        local Ent = holoEntity(Id)
        Ent["pos",vector] = P  
        holoPos(Id, P + (Ent["c",vector]*Ent["scl",vector]):rotate(Ent["ang",angle]) )
    }
    
    ###############
    ## 
    #   holoScaleExt( Id, S:vector )
    #     Use this where you would normally use holoScale on a normal hologram.
    #  
    function holoScaleExt( Id, S:vector ){
        local Ent = holoEntity(Id)
        Ent["scl",vector] = S  
        holoPos(Id, Ent["pos",vector] + (Ent["c",vector]*S):rotate(Ent["ang",angle]) )   
        holoScale(Id, S)   
    }  
    
    ###############
    ## 
    #   holoScaleUnitsExt( Id, S:vector )
    #     Use this where you would normally use holoScaleUnits on a normal hologram.
    #  
    function holoScaleUnitsExt( Id, S:vector ){
        local Ent = holoEntity(Id)
        S = S / Ent["model_scl",vector]
        Ent["scl",vector] = S
        holoPos(Id, Ent["pos",vector] + (Ent["c",vector]*S):rotate(Ent["ang",angle]) )   
        holoScale(Id, S)   
    }
    
    if(entity():model() == "models/bull/gates/microcontroller1.mdl"){
        selfDestruct()
        error("This is a library; #include it in something.")
    }
    
    # see hologramanticringelib_demo.txt for a demo of what this library does and how to use it
    
}

