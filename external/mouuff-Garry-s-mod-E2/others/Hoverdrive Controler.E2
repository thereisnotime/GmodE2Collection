@name HoverdriveE2
@inputs Hoverdrive:entity SmallJump SmallJumpLen
@outputs TargetPos:vector TargetAngle:angle Jump
@persist TargetPos:vector TargetAngle:angle Hoverdrive:entity
@persist FileName:string SavedPos:table Jump

function void writeFile(Name:string,Data:string){
    if (fileCanWrite()){
        fileWrite(Name,Data)
    }
    else{
        hint("Write error: "+Name,5)
    }
}

function void loadFile(Name:string){
    if (fileCanLoad()){
        runOnFile(1)
        fileLoad(Name)
    }
    else{
        hint("Load error: "+Name,5)
    }
}

if(fileClk() & fileLoaded())
{
    LoadedFile = fileRead()
    SavedPos = vonDecodeTable(LoadedFile)
    Hoverdrive = entity()
    hint("Hoverdrive positions loaded",5)
}

#position saver functions
function void savePos(Name:string, Pos:vector){
    #store a new position
    SavedPos[Name, vector] = Pos
    writeFile(FileName,vonEncode(SavedPos))
}
function void resetPos(){
    SavedPos = table()
    writeFile(FileName,vonEncode(SavedPos))
}
function vector getPos(Name:string){
    #get a saved position
    Keys = SavedPos:keys()
    for (Key=1, Keys:count()){
        if (Keys[Key,string]:find(Name)){
            return SavedPos[Keys[Key,string],vector]
        }
    }
    return vec(0,0,0)
}



function hoverJump(To:vector, Angle:angle){
    TargetPos = To
    TargetAngle = Angle
    timer("Jump", 50)
}

interval(100)
runOnChat(1)

if (first()|dupefinished()){
    FileName = map()+"_teleporter.txt"
    loadFile(FileName)
}

if (~SmallJump & SmallJump){
    hoverJump(Hoverdrive:toWorld(vec(SmallJumpLen,0,0)), Hoverdrive:angles())
}

if (chatClk(owner())){
    LastSaid = owner():lastSaid():explode(" ")
    Command = LastSaid[1, string]
    Arg1 = LastSaid[2, string]
    if (LastSaid[1, string][1] == "!"){
        hideChat(1)
    }
    if (Command=="!jsave"&Arg1){
        print("Position Saved as "+Arg1)
        savePos(Arg1, Hoverdrive:pos())
    }
    elseif (Command=="!jump"&Arg1){
        TargetPos = getPos(Arg1)
        if (TargetPos){
            hoverJump(TargetPos, Hoverdrive:angles())
        }
        else{
            print(Arg1+" not found")
        }
    }
    elseif (Command=="!escape"){
        hoverJump(randvec(),Hoverdrive:angles())
    }
    elseif (Command=="!taxi"&Arg1){
        Player = findPlayerByName(Arg1)
        hoverJump(Player:pos(),Hoverdrive:angles())
    }

    elseif (Command=="!jreset"){
        reset()
    }
    #remove a position
    elseif (Command == "!jremove"&Arg1){
        SavedPos:remove(Arg1)
        writeFile(FileName,vonEncode(SavedPos))
        print("Removed position: "+Arg1)
    }
    #list of saved positions
    elseif (Command == "!jlist"){
        print("Hoverdrive saved Positions:")
        for (X=1, SavedPos:count()){
            print(SavedPos:keys()[X, string])
        }
    }
}

if (clk("Jump")){
    Jump = 1
}
else{
    Jump = 0
}
