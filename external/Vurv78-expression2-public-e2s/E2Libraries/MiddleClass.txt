@name middleclass
@persist Classes:table
# Source -- https://github.com/Vurv78/expression2-public-e2s/edit/master/e2-libs-general/library.middleclass
# Author -- Vurv
# Inspired by https://github.com/kikito/middleclass
if(first()){

function table class(S:string)
{
    local T = Classes[S,table]
    T["__name__",string] = S
    T["__isnew__",number] = 0
    return T
}
function table class(S:string,MainClass:table)
{
    # Making a subclass, S being the new (sub) class name, mainclass being the original class.
    local MainTab = table()
    if(MainClass["__isnew__",number])
    {
        MainTab = Classes[MainClass["__name__",string],table]:clone()
    }else
    {
        MainTab = MainClass:clone()    
    }
    MainTab["__name__",string] = S
    MainTab["__issub__",number] = 1
    MainTab["__isnew__",number] = 0
    return MainTab
}
function table table:new()
{
    local T = This:clone()
    T["__isnew__",number]=1
    return T
}

# Repetitive Static values per each type of value, since e2 sucks

function table:set(Var:string,Value)
{
    if(This["__isnew__",number]!=1)
    {This[Var,number] = Value}
    else{Classes[This["__name__",string],table][Var,number]=Value}
}
function table:set(Var:string,Value:string)
{
    if(This["__isnew__",number]!=1)
    {This[Var,string] = Value}
    else{Classes[This["__name__",string],table][Var,string]=Value}
}

function table:setStaticValue(Var:string,Value:vector)
{
    if(This["__isnew__",number]!=1)
    {This[Var,vector] = Value}
    else{Classes[This["__name__",string],table][Var,vector]=Value}
}

function table:set(Var:string,Value:angle)
{
    if(This["__isnew__",number]!=1)
    {This[Var,angle] = Value}
    else{Classes[This["__name__",string],table][Var,angle]=Value}
}

function table:set(Var:string,Value:vector2)
{
    if(This["__isnew__",number]!=1)
    {This[Var,vector2] = Value}
    else{Classes[This["__name__",string],table][Var,vector2]=Value}
}

function table:set(Var:string,Value:table)
{
    if(This["__isnew__",number]!=1)
    {This[Var,table] = Value}
    else{Classes[This["__name__",string],table][Var,table]=Value}
}
function table:set(Var:string,Value:array)
{
    if(This["__isnew__",number]!=1)
    {This[Var,array] = Value}
    else{Classes[This["__name__",string],table][Var,array]=Value}
}

# Repetitive Static values per each type of value, since e2 sucks
}




# BEYOND HERE IS AN EXAMPLE...

# Defining an init function for the fruit class, but this would work for any table (Could make it error on different classes if needed)
function table:init(V)
{
    This["sweetness",number] = V    
}

local Fruit = class("Fruit")
Fruit:set("minsucciness",56)

function number table:isSucculent() #haha funny
{
    return (This["sweetness",number]>This["minsucciness",number])
}

# Making a subclass
Lemon = class("Lemon",Fruit)
Lemon:init(20)

TheLemon = Lemon:new()

# Making another subclass
Apple = class("Apple",Fruit)
Apple:init(70)

TheApple = Apple:new()

print(TheApple:isSucculent())

print(TheLemon:isSucculent())


